<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cpp随笔</title>
    <url>/2022/02/20/cpp%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c-变数范围"><a href="#c-变数范围" class="headerlink" title="c++变数范围"></a>c++变数范围</h1><p>变数在大陆叫变量，这一般指对象</p>
<p>范围指这个类（型）的大小，用 sizeof() 可以知道字节数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">666</span>;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">int</span>)&lt;&lt;endl&lt;&lt;<span class="built_in">sizeof</span>(a)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处输出为4，即4字节，每字节8位，一共32位，2^32为其大小</p>
<p>范围要看有无符号</p>
<p>##拓展：自定义类的大小</p>
<h1 id="→和-的分别"><a href="#→和-的分别" class="headerlink" title="→和.的分别"></a>→和.的分别</h1><p>这个一般在使用  结构体struct  或是  类class  的对象成员  可以见到</p>
<p>成员  包括成员函数（指针）和变量成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">str</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;Struct,*PStruct;</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> <span class="title class_">cla</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="number">2</span>; &#125;</span><br><span class="line">&#125;Class,*PClass;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Struct s1;</span><br><span class="line">	PStruct s2=&amp;s1;</span><br><span class="line">	cout &lt;&lt; s1.a &lt;&lt; endl </span><br><span class="line">		&lt;&lt; s2-&gt;b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	Class c1;</span><br><span class="line">	PClass c2 = &amp;c1;</span><br><span class="line">	cout &lt;&lt; c1.a &lt;&lt; endl</span><br><span class="line">		&lt;&lt; c2-&gt;a &lt;&lt; endl;</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2-&gt;<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##拓展：在 类class 中一般少用这些，数据都是protected的，需要函数接口</p>
<h1 id="this用法"><a href="#this用法" class="headerlink" title="this用法"></a>this用法</h1><p>this是一个待决名，cpp 里 this用来充当  当前空间所属的类的某个特定  对象开始处的指针</p>
<p>与 std:: 类似</p>
<p>大多在  类class  中出现 解决重名问题 </p>
<p>注意：this不能用于静态函数中</p>
<p>静态内存中不属于单个对象</p>
<p>静态类不属于单个对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> <span class="title class_">example</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a1</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a2</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a3</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		example::a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; a&lt;&lt;endl; &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">example&amp; <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*void change_b(int temp) &#123;</span></span><br><span class="line"><span class="comment">		this-&gt;b = temp;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="comment">/*static example&amp; copy1() &#123;</span></span><br><span class="line"><span class="comment">		return *this;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> b;</span><br><span class="line">&#125;Class,*PClass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Class c1;</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a1</span>(<span class="number">1</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a2</span>(<span class="number">2</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a3</span>(<span class="number">3</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	Class c2 = c1.<span class="built_in">copy</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>返回函数指针，定义和返回值函数指针在一起<br>表达式的组成部分：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="keyword">mutable</span> <span class="keyword">noexcept</span>-&gt;<span class="type">int</span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br></pre></td></tr></table></figure>

<p>返回函数指针<br>mutable 指可修改捕获对象   noexcept 指无异常   -&gt;int 指返回类型  （c++20均可省略）</p>
<p>[]中写捕获方式，函数使用外部变量的方式<br>[&#x3D;]值的方式 [&amp;]引用的方式 [this]this的方式，类中 []不捕获 [&#x3D;,&amp;x]x引用其他值捕获</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//完整版lambad表达式</span></span><br><span class="line">	pMax = [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="keyword">mutable</span> <span class="keyword">noexcept</span>-&gt;<span class="type">int</span> &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	<span class="comment">//省略</span></span><br><span class="line">	<span class="keyword">auto</span> pp = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	<span class="comment">//使用</span></span><br><span class="line">	<span class="built_in">pMax</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">pp</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//一步到位,对于短暂性实现函数</span></span><br><span class="line">	[](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//捕获</span></span><br><span class="line">	<span class="type">int</span> data = <span class="number">101010</span>;</span><br><span class="line">	<span class="keyword">auto</span> pFunc = [=] &#123; cout &lt;&lt; data &lt;&lt; endl; &#125;;</span><br><span class="line">	<span class="comment">//无参括号可以省略</span></span><br><span class="line">	<span class="comment">//值捕获不能修改,引用捕获可以修改</span></span><br><span class="line">	<span class="built_in">pFunc</span>();</span><br><span class="line">	<span class="comment">//捕获只在[=]前捕获一次，后面修改不再捕获</span></span><br><span class="line">	data = <span class="number">8080</span>;</span><br><span class="line">	<span class="built_in">pFunc</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##拓展lambda其他参数</p>
<p>​        constexpr指定函数调用运算符为constexpr函数（c++11的新关键字，大部分场景可以和const混用）</p>
<p>​        constrval指定函数调用运算符为立即函数</p>
<p>##拓展：对于一步到位的用法，在比较准则等处常使用</p>
<h1 id="如何传instance到函数中"><a href="#如何传instance到函数中" class="headerlink" title="如何传instance到函数中"></a>如何传instance到函数中</h1><p>形参，实参</p>
<p>##拓展：折叠参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//  ...折叠参数  可变参函数模板</span></span><br><span class="line"><span class="comment">//  ...Args是一个参数包  定义方法  Args  ...变量名字</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty,<span class="keyword">class</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(_Ty data, Args ...args)</span> </span>&#123;<span class="comment">//&#123;1,&quot;string&quot;,1&#125;</span></span><br><span class="line">	cout &lt;&lt; data &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;<span class="comment">//&#123;1&#125;</span></span><br><span class="line">	<span class="built_in">print</span>(args...);<span class="comment">//&#123;&quot;string&quot;,1&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(_Ty data)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; data &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="number">1.1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="头文件编写"><a href="#头文件编写" class="headerlink" title="头文件编写"></a>头文件编写</h1><p>.h的编写</p>
<p>在头文件中一般命名类和方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once//防止头文件重复</span><br></pre></td></tr></table></figure>

<p>##拓展：拿项目举例</p>
<h1 id="makefile的编写"><a href="#makefile的编写" class="headerlink" title="makefile的编写"></a>makefile的编写</h1><p>make是linux下的一个管理文件依赖关系的工具</p>
<p>在项目中常见 make makefile Makefile</p>
<p>makefile优先级高于Makefile</p>
<p>在makefile中语法为</p>
<p>target:prerequisites</p>
<p>​    commad</p>
<p>第一条语句是终极目标</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objs=begin.o body.o end.o</span><br><span class="line">CC=gcc</span><br><span class="line"><span class="section">final:<span class="variable">$(objs)</span></span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(objs)</span> -o final</span><br><span class="line"><span class="section">begin.o:begin.c</span></span><br><span class="line">	gcc begin.c -c -o begin.o</span><br><span class="line"><span class="section">body.o:body.c</span></span><br><span class="line">	gcc body.c -c -o body.o</span><br><span class="line"><span class="section">end.o:end.c</span></span><br><span class="line">	gcc end.c -c -o end.o</span><br><span class="line"><span class="section">clean: </span></span><br><span class="line">	rm -f *.o -rf</span><br></pre></td></tr></table></figure>

<p>CC默认就是gcc可以不用写</p>
<p>make即可生成文件</p>
<p>make clean即递归删除所有.o文件</p>
<p>##其余简略符号可以自行学习记忆</p>
]]></content>
  </entry>
  <entry>
    <title>c语言01</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8001/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言-01"><a href="#c语言-01" class="headerlink" title="c语言 01"></a>c语言 01</h1><h2 id="1-1-c语言组成"><a href="#1-1-c语言组成" class="headerlink" title="1.1 c语言组成"></a>1.1 c语言组成</h2><h3 id="关键字-32个"><a href="#关键字-32个" class="headerlink" title="关键字(32个)"></a>关键字(32个)</h3><p>auto signed unsigned int float double char long short<br>if else switch case default for do while continue break return goto<br>tyedef const static extern<br>struct union enum register<br>volatile sizeof</p>
<h3 id="运算符特殊功能符号"><a href="#运算符特殊功能符号" class="headerlink" title="运算符特殊功能符号"></a>运算符特殊功能符号</h3><p>￥ $ &amp; ^ * ()</p>
<h3 id="值-计算机直接识别直接存储"><a href="#值-计算机直接识别直接存储" class="headerlink" title="值(计算机直接识别直接存储)"></a>值(计算机直接识别直接存储)</h3><p>整型:十进制;八进制0为前置;十六进制0x前缀;无符号u后缀<br>浮点:lf后缀为double，f为float（不加默认double）<br>字符:   ‘   ’   括起来一个字符   \加东西也是一个字符<br>字符串字面量:   “   ”   括起来的</p>
<h3 id="标识符-程序员定义"><a href="#标识符-程序员定义" class="headerlink" title="标识符(程序员定义)"></a>标识符(程序员定义)</h3><p>如include，库，函数，变量，宏，结构，联合体名等等<br>命名规则：<br>1、只有数字，字母，下划线组成<br>2、不可以数字开头<br>3、不可以和关键字冲突<br>4、大小写敏感<br>最好顾名思义且好看<br>i,j,k循环变量<br>r,ret函数返回值<br>CreatWindow（windows习惯）或creat_window（linux习惯）</p>
<h4 id="vs注意事项："><a href="#vs注意事项：" class="headerlink" title="vs注意事项："></a>vs注意事项：</h4><p>#define _CRT_SECURE_NO_WARNINGS<br>&#x2F;&#x2F;vs要关安全开发周期检查，不然要加宏<br>&#x2F;&#x2F;关周期：项目，属性，c&#x2F;c++，sdl检查关掉</p>
<h2 id="1-2-c语言程序尝试"><a href="#1-2-c语言程序尝试" class="headerlink" title="1.2 c语言程序尝试"></a>1.2 c语言程序尝试</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//while (1);//停顿</span></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//停顿</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言02</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8002/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言02"><a href="#c语言02" class="headerlink" title="c语言02"></a>c语言02</h1><h2 id="2-1-常量与变量"><a href="#2-1-常量与变量" class="headerlink" title="2.1 常量与变量"></a>2.1 常量与变量</h2><p>对于计算机所有数据都是2进制<br>内存的最小管理单位byte字节，单位tb,gb,mb,kb,b；<br>内存的最小单位bit比特，晶体管，二进制位</p>
<h3 id="基本数据类型-占据内存的大小，数据的表示方式"><a href="#基本数据类型-占据内存的大小，数据的表示方式" class="headerlink" title="基本数据类型(占据内存的大小，数据的表示方式)"></a>基本数据类型(占据内存的大小，数据的表示方式)</h3><p>int（16位2字节32位4字节） char float double short long<br>char的本质是int，所有类型都要转成整数来储存<br>浮点数:正负位，11位指数，52位科学计数法<br>char是多字节字符集，wchar_t宽字节字符集、unicode字符集<br>值在常量区（只读），变量在变量区！！！</p>
<p>标识符(变量)：声明,定义,使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;<span class="comment">//声明并定义一个变量 类型为int 变量名为n，占据了一个可写的内存</span></span><br><span class="line">    n = <span class="number">10</span>;<span class="comment">//使用变量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回一个常量，占据一个只读的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-有无符号"><a href="#2-2-有无符号" class="headerlink" title="2.2 有无符号"></a>2.2 有无符号</h2><p>存储模式：有无符号，不影响类型<br>所有类型默认有符号，加上unsign表示无符号<br>数的范围：无符号0 ~ 2^n-1,有符号-2^(n-1) ~ 2^(n-1)</p>
<h3 id="源码，反码，补码"><a href="#源码，反码，补码" class="headerlink" title="源码，反码，补码"></a>源码，反码，补码</h3><p>计算机内全部储存都是补码，补码&#x3D;反码+1,反码&#x3D;按位取反<br>补码原理：1111+0001-m即回绕<br>反码原理：1111-m</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> c = <span class="number">456</span>;</span><br><span class="line">	<span class="type">int</span> n = c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n);<span class="comment">//-56</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-类型转换和溢出"><a href="#2-3-类型转换和溢出" class="headerlink" title="2.3 类型转换和溢出"></a>2.3 类型转换和溢出</h2><p>c语言是弱类型语言，类型检查不严格</p>
<p>标准io：在stdio.h库中，有printf和scanf<br>printf()可变长参数列表用 , 隔开参数<br>第一个参数是字符串（字符指针，字符数组，字符串字面量）<br>转义字符：%占位符（d十进制int有符号u十进制int无符号x十六进制f6位lf6位c字符型g省小数无用0p地址s字符串，\功能符（ascii码）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">55</span>;</span><br><span class="line">	<span class="type">double</span> d = <span class="number">66.66</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);</span><br><span class="line">    <span class="comment">//隐式转换，对于int a = b+c(b,c是double)这里是数据丢失</span></span><br><span class="line">	<span class="comment">//危险情况：输出时溢出被截断,截断高位。注意：如果多个%d就再读4字节而不是读下一个参数，因为这是压栈式（数据从右往左，高字节压倒低字节）</span></span><br><span class="line">	<span class="comment">//运算溢出几乎都会回绕(会扩大内存进位1仍存在)，赋值几乎都是截断</span></span><br><span class="line">	<span class="comment">//(int)d;//强制类型转换，小数转整形直接丢弃小数(丢失数据不是截断)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-大小端系统"><a href="#2-4-大小端系统" class="headerlink" title="2.4 大小端系统"></a>2.4 大小端系统</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//高低端字节序通过指针可以看出</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0x11223344</span>;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	c = n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>win下 hexo架构+butterfly主题+live2d看板娘 博客搭建</title>
    <url>/2022/03/09/win%E4%B8%8B-hexo%E6%9E%B6%E6%9E%84-butterfly%E4%B8%BB%E9%A2%98-live2d%E7%9C%8B%E6%9D%BF%E5%A8%98-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>需要git<br>下载nodejs lts版本 nodejs.org&#x2F;zh-cn&#x2F;<br>安装时选择固定路径，勾选自动安装相关软件<br>cmd下： (或者git下用linux指令)<br>npm install -g cnpm –registry&#x3D;<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a><br>cnpm install -g hexo-cli</p>
<h2 id="依次输入指令"><a href="#依次输入指令" class="headerlink" title="依次输入指令"></a>依次输入指令</h2><p>chdir查看当前目录<br>md blog或者mkdir E:\blog（最好不要blog，改个名字)<br>e:<br>cd e:\blog<br>进入根目录<br>hexo init<br>npm install<br>hexo s<br>hexo n “a”创建文件<br>cd source_posts<br>修改文件<br>cd..退回上一文件夹<br>hexo g本地静态保存<br>hexo s本地localhost:4000启动(在s后加  -p 改端口)</p>
<h2 id="静态网页实现"><a href="#静态网页实现" class="headerlink" title="静态网页实现"></a>静态网页实现</h2><p>在gitee(要ppage)或者github上创建公开仓库.io结尾<br>cnpm install –save hexo-deployer-git<br>编辑_config.yml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: 	</span><br><span class="line">	gitrepo: https://github.com/你的用户名.github.io.git</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>

<p>hexo d 推送博客到远端</p>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly  下载主题<br>(没pug和stylus渲染器要下载)<br>编辑_config.yml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes:butterfly</span><br></pre></td></tr></table></figure>

<p>hexo clean清除缓存文件和已生成公开文件<br>hexo g</p>
<h2 id="添加live2d看板娘"><a href="#添加live2d看板娘" class="headerlink" title="添加live2d看板娘"></a>添加live2d看板娘</h2><p>npm uninstall –save hexo-helper-live2d(如果下载了官方的要卸载)<br>cd进入themes&#x2F;butterfly&#x2F;source<br>git clone <a href="https://github.com/stevenjoezhang/live2d-widget.git(443%E6%8A%A5%E9%94%99%E5%B0%B1%E7%AD%89%E7%AD%89%E5%86%8D%E8%AF%95)">https://github.com/stevenjoezhang/live2d-widget.git(443报错就等等再试)</a><br>修改live2d-widget的autoload.js的live2d_path改为下方那个<br>进入butterfly下layout下includes的head.pug末尾粘贴</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(src=&#x27;live2d-widget/autoload.js&#x27;)</span><br></pre></td></tr></table></figure>

<p>最后在根目录下的config加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">	enable:true</span><br></pre></td></tr></table></figure>

<p>修改ive2d-widget的参数：<br>    waifu.css修改位置<br>    waifu-tips.js修改文本</p>
<h2 id="增加搜索"><a href="#增加搜索" class="headerlink" title="增加搜索"></a>增加搜索</h2><p>npm install hexo-generator-searchdb –save<br>vim source&#x2F;_data&#x2F;butterfly.yml<br>localsearch改true</p>
<h2 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h2><p>hexo手册<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>butterfly文档<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a><br>改网站搜索免费社交图标<a href="https://fontawesome.com/v5.15/icons?d=gallery&amp;p=1&amp;m=free">https://fontawesome.com/v5.15/icons?d=gallery&amp;p=1&amp;m=free</a><br>改网站顶置图片<a href="https://pic.netbian.com/4kdongman/">https://pic.netbian.com/4kdongman/</a><br>live2d内容网站：<br>api:github.com&#x2F;fghrsh&#x2F;live2d_api<br>模型:github.com&#x2F;summerscar&#x2F;live2dDemo<br>参考:<a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a><br> waifu-tips.js 的详细设置说明，和 waifu-tips.json 节点说明，见<a href="https://github.com/fghrsh/live2d_demo">https://github.com/fghrsh/live2d_demo</a></p>
]]></content>
      <tags>
        <tag>hexo butterfly live2d</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言03</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8003/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言03"><a href="#c语言03" class="headerlink" title="c语言03"></a>c语言03</h1><h2 id="3-1-表达式"><a href="#3-1-表达式" class="headerlink" title="3.1 表达式"></a>3.1 表达式</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//表达式具备唯一返回值</span></span><br><span class="line">	<span class="comment">//,连接多个语句     =赋值    ;结束语句   ()提升优先级</span></span><br><span class="line">	<span class="comment">//赋值顺序右往左</span></span><br><span class="line">	<span class="comment">//目数（操作数个数）：单双三    如  ，双目    ；单目    ？：三目</span></span><br><span class="line">	<span class="comment">//a?b:c;即a真假，真则b假则c（非0真，0假）</span></span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">1</span>,<span class="number">2</span>;<span class="comment">//n=1</span></span><br><span class="line">	n = (<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//n=2</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-输出详解"><a href="#3-2-输出详解" class="headerlink" title="3.2 输出详解"></a>3.2 输出详解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//只用于输出字符   </span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;hahaha&quot;</span>);<span class="comment">//只用于输出字符串 ，并自动回车  </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,(<span class="type">int</span>) <span class="string">&quot;1&quot;</span>); </span><br><span class="line">    <span class="comment">//字符串总以\0结尾(可省略),返回的是地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hahahaha%d\n&quot;</span>, <span class="number">10</span>);<span class="comment">//无输出上限</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//char 1字节，中文 2字节 属于字符串</span></span><br><span class="line">	<span class="comment">//char中存的是ascii码   a对应97</span></span><br><span class="line">	<span class="comment">//字符集 char 1字节 wchar_t 2字节</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//小数存储 float（4字节） 1符号，8e（ieee规定存储的时候要加上一个中间值127或1023）,23科学计数  double(8字节) 1符号，11e,52科学计数（科学计数：只要一位整数且小数点前必为1所以省去，只保留的小数点后面的部分）(e绝对范围，科学计数绝对精度)</span></span><br><span class="line">	<span class="comment">//2进制科学计数法： 小数点后就是n1*1/2^1+n2*1/2^2+n3*1/2^3…… </span></span><br><span class="line">	<span class="comment">//无可避免的浮点误差0.1+0.2=0.3(存储方式问题)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/05/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>新年快乐</title>
    <url>/2022/02/05/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>#blog搭建完成(包括界面，live2d，音乐)（待完善）</p>
]]></content>
  </entry>
  <entry>
    <title>c语言05</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8005/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言05"><a href="#c语言05" class="headerlink" title="c语言05"></a>c语言05</h1><h2 id="5-1-运算符"><a href="#5-1-运算符" class="headerlink" title="5.1 运算符"></a>5.1 运算符</h2><p>按位异或 ^ 同0异1<br>按位同或   同1异0（实现~和^一起用）<br>关系运算符   返回一定是逻辑值1真0假<br>指针只有NULL代表假，数值0就是假，\0是假，字符串自变量一定真因为返回的是地址<br>逻辑运算符<br>1、连接关系运算符，只看逻辑值,!逻辑非<br>2、&amp;&amp;和||具备短路性质，如果左值能决定那么右值不运算（优化）</p>
<p>注意运算符优先级!!!</p>
<p>注意在1&lt;a&lt;2按左到右计算1&lt;a返回0或1然后和&lt;2运算</p>
<p>0.0000000000000000000001放在float中还是有值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">	<span class="type">int</span> n = <span class="number">10</span>, m = <span class="number">20</span>;</span><br><span class="line">	<span class="type">int</span> temp = n;</span><br><span class="line">	n = m;</span><br><span class="line">	m = temp;</span><br><span class="line"></span><br><span class="line">	n = n + m;</span><br><span class="line">	m = n - m;</span><br><span class="line">	n = n - m;<span class="comment">//有范围上的缺陷</span></span><br><span class="line">	</span><br><span class="line">	n = n ^ m;<span class="comment">//1001^1100=0101</span></span><br><span class="line">	m = n ^ m;<span class="comment">//0101^1100=1001</span></span><br><span class="line">	n = n ^ m;<span class="comment">//0101^1001=1100</span></span><br><span class="line">	<span class="comment">//有两个可以推第三个</span></span><br><span class="line">	<span class="comment">//同或也可实现该功能</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;after swap:%d\n%d\n&quot;</span>, n, m);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 2</span></span><br><span class="line">	n = <span class="number">1</span>, m = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (n = <span class="number">6</span> &lt; <span class="number">3</span> &amp;&amp; (m == <span class="number">999</span>))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>, n, m);<span class="comment">//输出0,2</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>, n, m);<span class="comment">//输出0,2</span></span><br><span class="line">	n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n == <span class="number">1</span> &gt;= <span class="number">0</span>);<span class="comment">//输出0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-if语句"><a href="#5-2-if语句" class="headerlink" title="5.2 if语句"></a>5.2 if语句</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">	;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">	;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	;</span><br><span class="line"><span class="comment">//以上属于一个if语句</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上属于一个if语句</span></span><br></pre></td></tr></table></figure>

<p>一个if可以有多个else if和一个else以此判断，但有一个满足，执行后立即跳出整个if语句</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言06</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8006/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言06"><a href="#c语言06" class="headerlink" title="c语言06"></a>c语言06</h1><h2 id="6-1-判断语句"><a href="#6-1-判断语句" class="headerlink" title="6.1 判断语句"></a>6.1 判断语句</h2><h3 id="6-1-1-if语句"><a href="#6-1-1-if语句" class="headerlink" title="6.1.1 if语句"></a>6.1.1 if语句</h3><p>上一篇已讲</p>
<h3 id="6-1-2-switch语句"><a href="#6-1-2-switch语句" class="headerlink" title="6.1.2 switch语句"></a>6.1.2 switch语句</h3><p>在多个if时考虑使用switch<br>在汇编底层，循环就是跳转jmp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (n) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">		<span class="number">2</span>; <span class="number">2</span>;</span><br><span class="line">	&#125;; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:<span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不加{}只能加一条语句<br>语法限制：n要求只能返回整形值（不会帮你隐式转换）且case一定是值<br>swtich指从哪个case进入不break就会一直执行下面的</p>
<h2 id="6-2-goto语句"><a href="#6-2-goto语句" class="headerlink" title="6.2 goto语句"></a>6.2 goto语句</h2><p>用法：goto 标签d一般配合if使用</p>
<p>底层直接jmp</p>
<p>素数  m%(2到m-1)!&#x3D;0</p>
<p>判断素数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span><span class="comment">//c语言用布尔运算要加这个头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;	</span><br><span class="line">	<span class="type">bool</span> t;</span><br><span class="line">	t = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">flag:</span><br><span class="line">	<span class="keyword">if</span> (n% i == <span class="number">0</span>)t = <span class="literal">true</span>;</span><br><span class="line">	i++;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;n) <span class="keyword">goto</span> flag;<span class="comment">//写法</span></span><br><span class="line">	<span class="keyword">if</span> (t)<span class="built_in">printf</span>(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">    	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言04</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8004/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言04"><a href="#c语言04" class="headerlink" title="c语言04"></a>c语言04</h1><h2 id="4-1-运算符"><a href="#4-1-运算符" class="headerlink" title="4.1 运算符"></a>4.1 运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>+-正负 + -  &#x2F; *  %</p>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>~  &amp;  |  ^  《  》</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>+&#x3D;    -&#x3D;    *&#x3D;    &#x2F;&#x3D;    %&#x3D;    &amp;&#x3D;  |&#x3D;   ^&#x3D;   &lt;&lt;&#x3D;  &gt;&gt;&#x3D;</p>
<h3 id="自运算法"><a href="#自运算法" class="headerlink" title="自运算法"></a>自运算法</h3><p>n–  n++  –n  ++n</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>！  &amp;&amp;   ||  </p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>&lt; &gt;  &#x3D;&#x3D;  ！&#x3D;  &gt;&#x3D;  &lt;&#x3D;</p>
<h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><p>：，  ；  #  &amp;  ？：   （） （） （）[]  []  {} &lt;&gt; ‘’  “”  *  .   -&gt;  \  &#x2F;   &#x2F;&#x2F;     &#x2F;*   @</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>除法运算10&#x2F;3&#x3D;3，注意类型；10&#x2F;3.0&#x3D;3.3（在cpp中强类型语言隐式转换会报错）<br>不同类型运算时，整形提升，类型提升为更大的数据类型<br>取余运算，全部按正的算，看%左取正负<br>自运算符号位置在前先自运算再执行，在后先执行再自运算  例：n&#x3D;6,n++ + ++n + n++ + ++n&#x3D;6+8+8+10&#x3D;32<br>位运算针对二进制：按位取反~    按位与&amp;（全真为真，用来保留位）    按位或|（有真就真）<br>n&lt;&lt;m;a&gt;&gt;b;n左移m位（补0），a右移b位（补符号位）<br>sizeof是关键字不是运算符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0x80000001</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x    %x\n&quot;</span>,n&lt;&lt;<span class="number">1</span>,n&gt;&gt;<span class="number">1</span>);<span class="comment">//输出中遇到\0认为是字符串结尾结束输出</span></span><br><span class="line">	n = <span class="number">6</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n++ + ++n + n++ + ++n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><p>不一定要main为入口，vs项目-&gt;属性-&gt;c&#x2F;cpp-&gt;链接器-&gt;入口</p>
<p>黑窗口只能输入十进制</p>
<p>关系符的混合使用要注意优先级，一般用  (  )  括起来，以免出差错</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言07</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8007/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言07"><a href="#c语言07" class="headerlink" title="c语言07"></a>c语言07</h1><h2 id="7-1-循环语句"><a href="#7-1-循环语句" class="headerlink" title="7.1 循环语句"></a>7.1 循环语句</h2><h3 id="循环如何结束"><a href="#循环如何结束" class="headerlink" title="循环如何结束"></a>循环如何结束</h3><p>1、逻辑值判断为假<br>2、break打断，直接跳出当前循环<br>3、goto无条件跳转,return结束函数,exit(0)程序正常退出exit(1)程序异常退出<br>4、continue跳过本次循环</p>
<h3 id="7-1-1-goto实现循环"><a href="#7-1-1-goto实现循环" class="headerlink" title="7.1.1 goto实现循环"></a>7.1.1 goto实现循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">loop:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">	n /= <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">0</span>)<span class="keyword">goto</span> loop;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-1-2-for语句"><a href="#7-1-2-for语句" class="headerlink" title="7.1.2 for语句"></a>7.1.2 for语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (;n&gt;<span class="number">0</span>;) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">		n / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for (n&#x3D;10; n &gt; 0;n–)<br>在括号里定义的变量属于局部变量，只用于该语句体<br>第一个表达式是初始化<br>第二个是判断条件真<br>则执行第三个表达式和语句体，然后回到第二个表达式</p>
<h3 id="7-1-3-while语句"><a href="#7-1-3-while语句" class="headerlink" title="7.1.3 while语句"></a>7.1.3 while语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断while后面（）中只要为真就执行后面的语句<br>执行语句后再进行判断</p>
<h3 id="7-1-4-do-while语句"><a href="#7-1-4-do-while语句" class="headerlink" title="7.1.4 do while语句"></a>7.1.4 do while语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (<span class="number">0</span>); </span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与while几乎没区别<br>进入语句时先执行一次<br>再判断while后面（）中只要为真就执行后面的语句<br>执行语句后再进行判断</p>
<h2 id="7-2-练习案例"><a href="#7-2-练习案例" class="headerlink" title="7.2 练习案例"></a>7.2 练习案例</h2><h3 id="7-2-1-九九乘法表"><a href="#7-2-1-九九乘法表" class="headerlink" title="7.2.1 九九乘法表"></a>7.2.1 九九乘法表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == j + <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%2d   &quot;</span>, j, i, i * j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-斐波那契数列"><a href="#7-2-2-斐波那契数列" class="headerlink" title="7.2.2 斐波那契数列"></a>7.2.2 斐波那契数列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> first = <span class="number">0</span>, second = <span class="number">1</span>, third,m=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">	third = first + second;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, third);</span><br><span class="line">	first = second;</span><br><span class="line">	second = third;</span><br><span class="line">	Sleep(<span class="number">2000</span>);</span><br><span class="line">	m += third;</span><br><span class="line">	c++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言08</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8008/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言08"><a href="#c语言08" class="headerlink" title="c语言08"></a>c语言08</h1><h2 id="8-1-scanf输入"><a href="#8-1-scanf输入" class="headerlink" title="8.1 scanf输入"></a>8.1 scanf输入</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//&amp;是取地址符，&amp;n表示n的首地址</span></span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> m = &amp;n;</span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;, m);</span></span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;, &amp;n);//两条同理</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d，%c%d&quot;</span>, &amp;m,&amp;c, &amp;n);</span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line">	<span class="comment">//scanf(&quot;%c&quot;, &amp;c);</span></span><br><span class="line">	<span class="comment">//注意空格属于字符在输入时加空格会别%c识别</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d%c%d&quot;</span>, n, c, m);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-1-1-输入输出问题"><a href="#8-1-1-输入输出问题" class="headerlink" title="8.1.1 输入输出问题"></a>8.1.1 输入输出问题</h3><p>用fflush(流名称) 用于清空一个流</p>
<p>scanf在遇到空白，宽度结束，非法输入时，停止该数据输入<br>在遇到空白时会丢弃一个字符<br>注意enter包括\r回车 \n换行，\n没被丢弃可以赋予给%c<br>注意string，会读到\0即空白就停止<br>注意在scanf””中有格式其它的字符外会空读取，要保持格式一样</p>
<h3 id="8-1-2-格式字符："><a href="#8-1-2-格式字符：" class="headerlink" title="8.1.2 格式字符："></a>8.1.2 格式字符：</h3><p>%c读一个字符<br>%d读一个十进制<br>%o读一个八进制<br>%x读一个十六进制<br>%s读一个字符串<br>%f读一个浮点数e和g和lf同<br>%p读一个指针<br>%u读一个无符号十进制<br>%%读%<br>%e指数形式<br>%[]读[]里的字符合集,在[]中加^取反即不读<br>.n只留几位小数不进位<br>修饰符：<br>l长数据<br>h短数据<br>*空读一个数据<br>在%与格式之间加数字限定读入字符<br>(B)略去多个空白字符直至出现非空白字符;该条一般默认存在<br>(c)略去该个固定的字符</p>
<h2 id="8-2-指针基础"><a href="#8-2-指针基础" class="headerlink" title="8.2 指针基础"></a>8.2 指针基础</h2><p>cpu通过寄存器读内存<br>每个内存有一个地址</p>
<p>指针：首地址+类型（地址大小：地址位数 &#x3D; 寄存器位数 &#x3D; int &#x3D; 32位）<br>指针变量：用来存储指针的变量</p>
<h2 id="8-3-main函数的参数"><a href="#8-3-main函数的参数" class="headerlink" title="8.3 main函数的参数"></a>8.3 main函数的参数</h2><p>#include “stdafx.h”<br>包含了&lt;stdio.h&gt;和&lt;tchar.h&gt;,tchar又有#define _tmain main</p>
<p>int _tmain(int argc,char* argv][])<br>这个是windows提供对unicode和ansi字符集自动转换用的程序入口点，会根据宏改对应的函数签名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc,<span class="type">char</span>* argv][],<span class="type">char</span> **env )&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> m = （<span class="type">int</span>)&amp; n;<span class="comment">//cpp一定要强制转换</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, m);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//两者相同</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>argc和argv参数在用命令行编译程序时有用<br>第一个参数，用来统计程序运行时发送给main函数的命令行参数的个数，在VS中默认值为1，有参数时会自动改变<br>第二个参数，用来存放指向的字符串参数的指针数组，每一个元素指向一个参数<br>    各成员含义如下：<br>    argv[0]指向程序运行的全路径名<br>    argv[1]指向在DOS命令行中执行程序名后的第一个字符串<br>    argv[2]指向执行程序名后的第二个字符串<br>    argv[3]指向执行程序名后的第三个字符串<br>    argv[argc]为NULL<br>第三个参数，env[]的每一个元素都包含ENVVAR&#x3D;value形式的字符串<br>其中ENVVAR为环境变量，value为其对应的值，平时使用到的比较少</p>
<h3 id="实践方法"><a href="#实践方法" class="headerlink" title="实践方法"></a>实践方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>找到exe文件的所在文件夹<br>运行cmd<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“程序名.exe” 参数a 参数b 参数c</span><br></pre></td></tr></table></figure>

<p>便可运行程序，程序可通过argv[i]使用参数</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>vs中<br>项目-&gt;属性-&gt;调试-&gt;命令参数<br>输入所需参数即可<br>注意空格隔开</p>
]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言09</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8009/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言09"><a href="#c语言09" class="headerlink" title="c语言09"></a>c语言09</h1><h2 id="9-1-数组"><a href="#9-1-数组" class="headerlink" title="9.1 数组"></a>9.1 数组</h2><p>同普通变量一样，需要声明和定义<br>[]内必须是确定值(低版本)，有初始化可以不用</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>连续内存段</p>
<p>数组名绑定一块内存段，数组名的返回值是数组首地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> height = <span class="number">168</span>;</span><br><span class="line">	<span class="type">int</span> height6, height5, height4, height3, height2, height1;</span><br><span class="line">	<span class="type">int</span> height0[<span class="number">666</span>];</span><br><span class="line">	<span class="comment">//初始化（只有这个时候可以用=赋值）</span></span><br><span class="line">	<span class="comment">//没写的补0，什么都没写就不初始化，经典写法=&#123;0&#125;</span></span><br><span class="line">	<span class="type">int</span> a[<span class="number">6</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	<span class="comment">//访问：读，写</span></span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//数组下标（正整数）访问数组,可以超出定义即越界（0~n-1）但是</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="9-2-字符串"><a href="#9-2-字符串" class="headerlink" title="9.2 字符串"></a>9.2 字符串</h2><h3 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h3><p>字符串字面量(即字符)：（以\0结尾，没有会自动填充）以ascii码保存<br>字符数组：用数组存多个字符<br>字符指针(即字符类型的指针)</p>
<h3 id="ascii码"><a href="#ascii码" class="headerlink" title="ascii码"></a>ascii码</h3><p>‘0’&#x3D;0x30   ‘A’&#x3D;0x41  ‘a’&#x3D;0x61</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="string">&quot;afuab&quot;</span>;<span class="comment">//字符串返回值是首地址，类比数组，不可以给a赋值</span></span><br><span class="line">	<span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="string">&quot;afuab&quot;</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> str[<span class="number">5</span>] = <span class="string">&quot;abcde&quot;</span>;<span class="comment">//或者=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;&#125;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str);<span class="comment">//注意：输出时一个个字符输出直到遇到\0</span></span><br><span class="line">	<span class="comment">//&quot;abcdef&quot;[0] = 1;//只读内存段（常量）不可修改</span></span><br><span class="line">	<span class="built_in">strcpy</span>(str,<span class="string">&quot;asd&quot;</span>);<span class="comment">//字符串拷贝，遇到\0结束</span></span><br><span class="line">	<span class="built_in">memcpy</span>(str,<span class="string">&quot;asf&quot;</span>,<span class="number">8</span>);<span class="comment">//内存拷贝，以字节为单位，可以无视类型</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-案例"><a href="#9-3-案例" class="headerlink" title="9.3 案例"></a>9.3 案例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//反向输出</span></span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(str);<span class="comment">//获取字符串长度，不包括\0</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="comment">//输出中文</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">	len = <span class="built_in">strlen</span>(str);<span class="comment">//一个中文占俩个字节</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i-=<span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, str[i<span class="number">-1</span>],str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言10</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8010/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言10"><a href="#c语言10" class="headerlink" title="c语言10"></a>c语言10</h1><h2 id="10-1-函数"><a href="#10-1-函数" class="headerlink" title="10.1 函数"></a>10.1 函数</h2><p>函数也需要：声明，定义，使用<br>声明后才可以使用定义时参数可以只写类型<br>声明才可以使用函数<br>在前面定义相当于声明</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>定义返回类型 函数名（类型 参数列表（用, 隔开参数））</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>跳转：函数名的返回值是函数的地址<br>传参：以赋值形势（单向）<br>        值传递，地址传递，引用（cpp才有）<br>        ()内有void不允许传参，不然可以传任意参数,传参即初始化<br>返回：函数表达式被函数的返回值代替<br>        返回值不写的话,编译器会帮你默认返回int 0<br>        printf函数返回字节值<br>        (返回值都在eax里，printf占用后，不写默认返回字节数)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">1</span>);<span class="comment">//参数的使用</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">666</span>));</span><br><span class="line">    <span class="comment">//printf(&quot;%d&quot;, 666)是表达式，先执行，然后返回值，大小为输出了的字节数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n%d\n&quot;</span>, <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a),<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b));</span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;,&amp;a)也是表达式，先执行，然后返回值，大小为输入了的字节数,多了的%d会输出</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="comment">//注意这里ab与上面输入刚好反序</span></span><br><span class="line">	<span class="comment">//reason:输出多个时，是从后面开始，因为先压栈的最后出，所以上面的先读了b</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h3><p>调用函数<br>        语言自带：&lt;stdio.h&gt; printf scanf<br>        系统自带 ：&lt;windows.h&gt; Sleep<br>        第三方库：&lt;winmm.lib&gt; mciSendString<br>自定义函数<br>多文档编程<br>        同一个工程中(只有一个main)拆分多个源文件，分出.h和.c文件<br>        include后加“头文件名.h”<br>        “”先在当前文件夹找，再去系统文件夹找；用&lt;&gt;直接去系统文件夹找<br>库 静态库 动态库</p>
<h3 id="函数查询"><a href="#函数查询" class="headerlink" title="函数查询"></a>函数查询</h3><p>选中函数然后F1可以看函数怎么用<br>选中函数然后F12可以看函数原型（其实是看库内定义）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span><span class="comment">//这个就是函数的声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;winmm.lib&quot;</span>)<span class="comment">//加静态库（library）</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line">function() &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;函数建立&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line">swap(<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = function(),m=<span class="number">1</span>;</span><br><span class="line">	swap(n, m);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, n,m);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置定义，在前处已经声明了</span></span><br><span class="line">swap(<span class="type">int</span> a,<span class="type">int</span> b) &#123;</span><br><span class="line">	<span class="type">int</span> temp = a; a = b; b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言11</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8011/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言11"><a href="#c语言11" class="headerlink" title="c语言11"></a>c语言11</h1><h2 id="11-1-指针解引用"><a href="#11-1-指针解引用" class="headerlink" title="11.1 指针解引用"></a>11.1 指针解引用</h2><p>int n;&#x2F;&#x2F;n绑定了一个内存段，用n就是引用这个内存段<br>解：解析，解释，解读<br>解引用*单目运算符，右操作数是指针，一个带类型的首地址，返回一个内存段指针数学运算，带类型运算</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//定义： 类型* 变量</span></span><br><span class="line">	<span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* p;<span class="comment">//储存一个int类型内存段的指针</span></span><br><span class="line">	</span><br><span class="line">	p = &amp;n;<span class="comment">//&amp;取n首地址，给p</span></span><br><span class="line">	<span class="comment">//指针变量p指向n（指针变量p绑定的内存段中保存着变量n的首地址）</span></span><br><span class="line">	*p = <span class="number">1</span>;<span class="comment">//可写，返回的是一个内存段，*p实际上就等同于n</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//其他赋值	</span></span><br><span class="line">    <span class="type">int</span>* w = <span class="number">0x11223344</span>;<span class="comment">//可以直接人工给地址，一般不会用	</span></span><br><span class="line">	<span class="type">char</span>* q = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">	<span class="comment">//拿到1234四个字符的首地址(字符1的地址（字符串,一个一个字符存/数字是直接一整个存）)放在q）</span></span><br><span class="line">	p = q;<span class="comment">//把存在q中的地址复制到p中</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %x\n&quot;</span>, *p,*q);<span class="comment">//输出ascii码从字符1开始</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//运算</span></span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">	<span class="type">char</span> *a= arr;</span><br><span class="line">	<span class="type">int</span>* b = arr;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *a);<span class="comment">//1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *b);<span class="comment">//1</span></span><br><span class="line">	a += <span class="number">1</span>;</span><br><span class="line">	b += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *a);<span class="comment">//0</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *b);<span class="comment">//2</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-2-指针与数组"><a href="#11-2-指针与数组" class="headerlink" title="11.2 指针与数组"></a>11.2 指针与数组</h2><h3 id="利用指针访问数组"><a href="#利用指针访问数组" class="headerlink" title="利用指针访问数组"></a>利用指针访问数组</h3><p>[]在访问时的意思是，读该偏移地址的值<br>数组[i]  等同于  首地址+i后解引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">	<span class="type">char</span> arr[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">	<span class="comment">//下标访问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="string">&quot;abcdefg&quot;</span>[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="comment">//指针访问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(str+i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,* (<span class="string">&quot;abcdefg&quot;</span>+i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组名的返回"><a href="#数组名的返回" class="headerlink" title="数组名的返回"></a>数组名的返回</h3><p>地址返回值包括：带类型的地址</p>
<p>数组名的返回值是第一个元素的地址<br>        即元素类型的地址<br>        所以数组名不是首地址</p>
<p>&amp;数组名的返回值是数组类型地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">2</span>] = &#123; <span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, arr );<span class="comment">//,返回第一个元素的首地址，单位是int类型，</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, &amp;arr );<span class="comment">//取整个数组的首地址,类型是int数组类型</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, &amp;arr + <span class="number">1</span>);<span class="comment">//相当于加了一个数组长度,8字节</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, arr + <span class="number">1</span>);<span class="comment">//只加了4个字节</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-3-指针数组和数组指针区别"><a href="#11-3-指针数组和数组指针区别" class="headerlink" title="11.3 指针数组和数组指针区别"></a>11.3 指针数组和数组指针区别</h2><p>数组就是多个相同类型整合成一个，<br>指针数组就是多个同类型的指针整合起来<br>int*[] p则是定义一个元素为int类型指针的数组</p>
<p>数组指针则是&amp;数组名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span>* parr[<span class="number">2</span>] = &#123;&amp;arr[<span class="number">0</span>],&amp; arr[<span class="number">1</span>]&#125;;</span><br><span class="line">	<span class="type">int</span>* p[] = &#123; <span class="string">&quot;asd123asd&quot;</span>,<span class="string">&quot;qwe456qwe&quot;</span>,<span class="string">&quot;zxc789zxc&quot;</span> &#125;;</span><br><span class="line">	<span class="comment">//int* (p[])= &#123; &quot;asd&quot;, &quot;qwe&quot;, &quot;zxc&quot; &#125;同上;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*((<span class="type">char</span>*)p[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//注意类型不同		</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ((<span class="type">char</span>*)p[<span class="number">0</span>])[<span class="number">1</span>]);<span class="comment">//同上				</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//先执行p[0]得到地址，但指针类型不变还是int，[1]就加4字节,注意此处与二位数组不同</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言12</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8012/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言13</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8013/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言14</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8014/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言16</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8016/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言15</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8015/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言17</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8017/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言19</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8019/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言18</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8018/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script>]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
</search>
