<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cpp随笔</title>
    <url>/2022/02/20/cpp%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c-变数范围"><a href="#c-变数范围" class="headerlink" title="c++变数范围"></a>c++变数范围</h1><p>变数在大陆叫变量，这一般指对象</p>
<p>范围指这个类（型）的大小，用 sizeof() 可以知道字节数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">666</span>;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">int</span>)&lt;&lt;endl&lt;&lt;<span class="built_in">sizeof</span>(a)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处输出为4，即4字节，每字节8位，一共32位，2^32为其大小</p>
<p>范围要看有无符号</p>
<p>##拓展：自定义类的大小</p>
<h1 id="→和-的分别"><a href="#→和-的分别" class="headerlink" title="→和.的分别"></a>→和.的分别</h1><p>这个一般在使用  结构体struct  或是  类class  的对象成员  可以见到</p>
<p>成员  包括成员函数（指针）和变量成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">str</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;Struct,*PStruct;</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> <span class="title class_">cla</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="number">2</span>; &#125;</span><br><span class="line">&#125;Class,*PClass;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Struct s1;</span><br><span class="line">	PStruct s2=&amp;s1;</span><br><span class="line">	cout &lt;&lt; s1.a &lt;&lt; endl </span><br><span class="line">		&lt;&lt; s2-&gt;b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	Class c1;</span><br><span class="line">	PClass c2 = &amp;c1;</span><br><span class="line">	cout &lt;&lt; c1.a &lt;&lt; endl</span><br><span class="line">		&lt;&lt; c2-&gt;a &lt;&lt; endl;</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2-&gt;<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##拓展：在 类class 中一般少用这些，数据都是protected的，需要函数接口</p>
<h1 id="this用法"><a href="#this用法" class="headerlink" title="this用法"></a>this用法</h1><p>this是一个待决名，cpp 里 this用来充当  当前空间所属的类的某个特定  对象开始处的指针</p>
<p>与 std:: 类似</p>
<p>大多在  类class  中出现 解决重名问题 </p>
<p>注意：this不能用于静态函数中</p>
<p>静态内存中不属于单个对象</p>
<p>静态类不属于单个对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> <span class="title class_">example</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a1</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a2</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a3</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		example::a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; a&lt;&lt;endl; &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">example&amp; <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*void change_b(int temp) &#123;</span></span><br><span class="line"><span class="comment">		this-&gt;b = temp;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="comment">/*static example&amp; copy1() &#123;</span></span><br><span class="line"><span class="comment">		return *this;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> b;</span><br><span class="line">&#125;Class,*PClass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Class c1;</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a1</span>(<span class="number">1</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a2</span>(<span class="number">2</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a3</span>(<span class="number">3</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	Class c2 = c1.<span class="built_in">copy</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>返回函数指针，定义和返回值函数指针在一起<br>表达式的组成部分：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="keyword">mutable</span> <span class="keyword">noexcept</span>-&gt;<span class="type">int</span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br></pre></td></tr></table></figure>

<p>返回函数指针<br>mutable 指可修改捕获对象   noexcept 指无异常   -&gt;int 指返回类型  （c++20均可省略）</p>
<p>[]中写捕获方式，函数使用外部变量的方式<br>[&#x3D;]值的方式 [&amp;]引用的方式 [this]this的方式，类中 []不捕获 [&#x3D;,&amp;x]x引用其他值捕获</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//完整版lambad表达式</span></span><br><span class="line">	pMax = [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="keyword">mutable</span> <span class="keyword">noexcept</span>-&gt;<span class="type">int</span> &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	<span class="comment">//省略</span></span><br><span class="line">	<span class="keyword">auto</span> pp = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	<span class="comment">//使用</span></span><br><span class="line">	<span class="built_in">pMax</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">pp</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//一步到位,对于短暂性实现函数</span></span><br><span class="line">	[](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//捕获</span></span><br><span class="line">	<span class="type">int</span> data = <span class="number">101010</span>;</span><br><span class="line">	<span class="keyword">auto</span> pFunc = [=] &#123; cout &lt;&lt; data &lt;&lt; endl; &#125;;</span><br><span class="line">	<span class="comment">//无参括号可以省略</span></span><br><span class="line">	<span class="comment">//值捕获不能修改,引用捕获可以修改</span></span><br><span class="line">	<span class="built_in">pFunc</span>();</span><br><span class="line">	<span class="comment">//捕获只在[=]前捕获一次，后面修改不再捕获</span></span><br><span class="line">	data = <span class="number">8080</span>;</span><br><span class="line">	<span class="built_in">pFunc</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##拓展lambda其他参数</p>
<p>​        constexpr指定函数调用运算符为constexpr函数（c++11的新关键字，大部分场景可以和const混用）</p>
<p>​        constrval指定函数调用运算符为立即函数</p>
<p>##拓展：对于一步到位的用法，在比较准则等处常使用</p>
<h1 id="如何传instance到函数中"><a href="#如何传instance到函数中" class="headerlink" title="如何传instance到函数中"></a>如何传instance到函数中</h1><p>形参，实参</p>
<p>##拓展：折叠参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//  ...折叠参数  可变参函数模板</span></span><br><span class="line"><span class="comment">//  ...Args是一个参数包  定义方法  Args  ...变量名字</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty,<span class="keyword">class</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(_Ty data, Args ...args)</span> </span>&#123;<span class="comment">//&#123;1,&quot;string&quot;,1&#125;</span></span><br><span class="line">	cout &lt;&lt; data &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;<span class="comment">//&#123;1&#125;</span></span><br><span class="line">	<span class="built_in">print</span>(args...);<span class="comment">//&#123;&quot;string&quot;,1&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(_Ty data)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; data &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="number">1.1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="头文件编写"><a href="#头文件编写" class="headerlink" title="头文件编写"></a>头文件编写</h1><p>.h的编写</p>
<p>在头文件中一般命名类和方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once//防止头文件重复</span><br></pre></td></tr></table></figure>

<p>##拓展：拿项目举例</p>
<h1 id="makefile的编写"><a href="#makefile的编写" class="headerlink" title="makefile的编写"></a>makefile的编写</h1><p>make是linux下的一个管理文件依赖关系的工具</p>
<p>在项目中常见 make makefile Makefile</p>
<p>makefile优先级高于Makefile</p>
<p>在makefile中语法为</p>
<p>target:prerequisites</p>
<p>​    commad</p>
<p>第一条语句是终极目标</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objs=begin.o body.o end.o</span><br><span class="line">CC=gcc</span><br><span class="line"><span class="section">final:<span class="variable">$(objs)</span></span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(objs)</span> -o final</span><br><span class="line"><span class="section">begin.o:begin.c</span></span><br><span class="line">	gcc begin.c -c -o begin.o</span><br><span class="line"><span class="section">body.o:body.c</span></span><br><span class="line">	gcc body.c -c -o body.o</span><br><span class="line"><span class="section">end.o:end.c</span></span><br><span class="line">	gcc end.c -c -o end.o</span><br><span class="line"><span class="section">clean: </span></span><br><span class="line">	rm -f *.o -rf</span><br></pre></td></tr></table></figure>

<p>CC默认就是gcc可以不用写</p>
<p>make即可生成文件</p>
<p>make clean即递归删除所有.o文件</p>
<p>##其余简略符号可以自行学习记忆</p>
]]></content>
  </entry>
  <entry>
    <title>c语言01</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8001/</url>
    <content><![CDATA[<h1 id="c语言-01"><a href="#c语言-01" class="headerlink" title="c语言 01"></a>c语言 01</h1><h2 id="1-1-c语言组成"><a href="#1-1-c语言组成" class="headerlink" title="1.1 c语言组成"></a>1.1 c语言组成</h2><h3 id="关键字-32个"><a href="#关键字-32个" class="headerlink" title="关键字(32个)"></a>关键字(32个)</h3><p>auto signed unsigned int float double char long short<br>if else switch case default for do while continue break return goto<br>tyedef const static extern<br>struct union enum register<br>volatile sizeof</p>
<h3 id="运算符特殊功能符号"><a href="#运算符特殊功能符号" class="headerlink" title="运算符特殊功能符号"></a>运算符特殊功能符号</h3><p>￥ $ &amp; ^ * ()</p>
<h3 id="值-计算机直接识别直接存储"><a href="#值-计算机直接识别直接存储" class="headerlink" title="值(计算机直接识别直接存储)"></a>值(计算机直接识别直接存储)</h3><p>整型:十进制;八进制0为前置;十六进制0x前缀;无符号u后缀<br>浮点:lf后缀为double，f为float（不加默认double）<br>字符:   ‘   ’   括起来一个字符   \加东西也是一个字符<br>字符串字面量:   “   ”   括起来的</p>
<h3 id="标识符-程序员定义"><a href="#标识符-程序员定义" class="headerlink" title="标识符(程序员定义)"></a>标识符(程序员定义)</h3><p>如include，库，函数，变量，宏，结构，联合体名等等<br>命名规则：<br>1、只有数字，字母，下划线组成<br>2、不可以数字开头<br>3、不可以和关键字冲突<br>4、大小写敏感<br>最好顾名思义且好看<br>i,j,k循环变量<br>r,ret函数返回值<br>CreatWindow（windows习惯）或creat_window（linux习惯）</p>
<h4 id="vs注意事项："><a href="#vs注意事项：" class="headerlink" title="vs注意事项："></a>vs注意事项：</h4><p>#define _CRT_SECURE_NO_WARNINGS<br>&#x2F;&#x2F;vs要关安全开发周期检查，不然要加宏<br>&#x2F;&#x2F;关周期：项目，属性，c&#x2F;c++，sdl检查关掉</p>
<h2 id="1-2-c语言程序尝试"><a href="#1-2-c语言程序尝试" class="headerlink" title="1.2 c语言程序尝试"></a>1.2 c语言程序尝试</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//while (1);//停顿</span></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//停顿</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言02</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8002/</url>
    <content><![CDATA[<h1 id="c语言02"><a href="#c语言02" class="headerlink" title="c语言02"></a>c语言02</h1><h2 id="2-1-常量与变量"><a href="#2-1-常量与变量" class="headerlink" title="2.1 常量与变量"></a>2.1 常量与变量</h2><p>对于计算机所有数据都是2进制<br>内存的最小管理单位byte字节，单位tb,gb,mb,kb,b；<br>内存的最小单位bit比特，晶体管，二进制位</p>
<h3 id="基本数据类型-占据内存的大小，数据的表示方式"><a href="#基本数据类型-占据内存的大小，数据的表示方式" class="headerlink" title="基本数据类型(占据内存的大小，数据的表示方式)"></a>基本数据类型(占据内存的大小，数据的表示方式)</h3><p>int（16位2字节32位4字节） char float double short long<br>char的本质是int，所有类型都要转成整数来储存<br>浮点数:正负位，11位指数，52位科学计数法<br>char是多字节字符集，wchar_t宽字节字符集、unicode字符集<br>值在常量区（只读），变量在变量区！！！</p>
<h3 id="命名问题"><a href="#命名问题" class="headerlink" title="命名问题"></a>命名问题</h3><p>以字母或下划线开始，不能以数字开始，不允许使用关键字</p>
<p>即标识符的命名只能由字母（a～z，A～Z）、数字（0～9）、下划线（_）组成，并且标识符的第一个字符必须是字母或下划线，不能以数字开头</p>
<p>标识符(变量)：声明,定义,使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;<span class="comment">//声明并定义一个变量 类型为int 变量名为n，占据了一个可写的内存</span></span><br><span class="line">    n = <span class="number">10</span>;<span class="comment">//使用变量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回一个常量，占据一个只读的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-有无符号"><a href="#2-2-有无符号" class="headerlink" title="2.2 有无符号"></a>2.2 有无符号</h2><p>存储模式：有无符号，不影响类型<br>所有类型默认有符号，加上unsign表示无符号<br>数的范围：无符号0 ~ 2^n-1,有符号-2^(n-1) ~ 2^(n-1)</p>
<h3 id="源码，反码，补码"><a href="#源码，反码，补码" class="headerlink" title="源码，反码，补码"></a>源码，反码，补码</h3><p>计算机内全部储存都是补码，补码&#x3D;反码+1,反码&#x3D;按位取反<br>补码原理：1111+0001-m即回绕<br>反码原理：1111-m</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> c = <span class="number">456</span>;</span><br><span class="line">	<span class="type">int</span> n = c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n);<span class="comment">//-56</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-类型转换和溢出"><a href="#2-3-类型转换和溢出" class="headerlink" title="2.3 类型转换和溢出"></a>2.3 类型转换和溢出</h2><p>c语言是弱类型语言，类型检查不严格</p>
<p>标准io：在stdio.h库中，有printf和scanf<br>printf()可变长参数列表用 , 隔开参数<br>第一个参数是字符串（字符指针，字符数组，字符串字面量）<br>转义字符：%占位符（d十进制int有符号u十进制int无符号x十六进制f6位lf6位c字符型g省小数无用0p地址s字符串，\功能符（ascii码）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">55</span>;</span><br><span class="line">	<span class="type">double</span> d = <span class="number">66.66</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);</span><br><span class="line">    <span class="comment">//隐式转换，对于int a = b+c(b,c是double)这里是数据丢失</span></span><br><span class="line">	<span class="comment">//危险情况：输出时溢出被截断,截断高位。注意：如果多个%d就再读4字节而不是读下一个参数，因为这是压栈式（数据从右往左，高字节压倒低字节）</span></span><br><span class="line">	<span class="comment">//运算溢出几乎都会回绕(会扩大内存进位1仍存在)，赋值几乎都是截断</span></span><br><span class="line">	<span class="comment">//(int)d;//强制类型转换，小数转整形直接丢弃小数(丢失数据不是截断)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-大小端系统"><a href="#2-4-大小端系统" class="headerlink" title="2.4 大小端系统"></a>2.4 大小端系统</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//高低端字节序通过指针可以看出</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0x11223344</span>;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	c = n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>win下 hexo架构+butterfly主题+live2d看板娘 博客搭建</title>
    <url>/2022/03/09/win%E4%B8%8B-hexo%E6%9E%B6%E6%9E%84-butterfly%E4%B8%BB%E9%A2%98-live2d%E7%9C%8B%E6%9D%BF%E5%A8%98-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>需要git<br>下载nodejs lts版本 nodejs.org&#x2F;zh-cn&#x2F;<br>安装时选择固定路径，勾选自动安装相关软件<br>cmd下： (或者git下用linux指令)<br>npm install -g cnpm –registry&#x3D;<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a><br>cnpm install -g hexo-cli</p>
<h2 id="依次输入指令"><a href="#依次输入指令" class="headerlink" title="依次输入指令"></a>依次输入指令</h2><p>chdir查看当前目录<br>md blog或者mkdir E:\blog（最好不要blog，改个名字)<br>e:<br>cd e:\blog<br>进入根目录<br>hexo init<br>npm install<br>hexo s<br>hexo n “a”创建文件<br>cd source_posts<br>修改文件<br>cd..退回上一文件夹<br>hexo g本地静态保存<br>hexo s本地localhost:4000启动(在s后加  -p 改端口)</p>
<h2 id="静态网页实现"><a href="#静态网页实现" class="headerlink" title="静态网页实现"></a>静态网页实现</h2><p>在gitee(要ppage)或者github上创建公开仓库.io结尾<br>cnpm install –save hexo-deployer-git<br>编辑_config.yml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: 	</span><br><span class="line">	gitrepo: https://github.com/你的用户名.github.io.git</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>

<p>hexo d 推送博客到远端</p>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly  下载主题<br>(没pug和stylus渲染器要下载)<br>编辑_config.yml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes:butterfly</span><br></pre></td></tr></table></figure>

<p>hexo clean清除缓存文件和已生成公开文件<br>hexo g</p>
<h2 id="添加live2d看板娘"><a href="#添加live2d看板娘" class="headerlink" title="添加live2d看板娘"></a>添加live2d看板娘</h2><p>npm uninstall –save hexo-helper-live2d(如果下载了官方的要卸载)<br>cd进入themes&#x2F;butterfly&#x2F;source<br>git clone <a href="https://github.com/stevenjoezhang/live2d-widget.git(443%E6%8A%A5%E9%94%99%E5%B0%B1%E7%AD%89%E7%AD%89%E5%86%8D%E8%AF%95)">https://github.com/stevenjoezhang/live2d-widget.git(443报错就等等再试)</a><br>修改live2d-widget的autoload.js的live2d_path改为下方那个<br>进入butterfly下layout下includes的head.pug末尾粘贴</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(src=&#x27;live2d-widget/autoload.js&#x27;)</span><br></pre></td></tr></table></figure>

<p>最后在根目录下的config加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">	enable:true</span><br></pre></td></tr></table></figure>

<p>修改ive2d-widget的参数：<br>    waifu.css修改位置<br>    waifu-tips.js修改文本</p>
<h2 id="增加搜索"><a href="#增加搜索" class="headerlink" title="增加搜索"></a>增加搜索</h2><p>npm install hexo-generator-searchdb –save<br>vim source&#x2F;_data&#x2F;butterfly.yml<br>localsearch改true</p>
<h2 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h2><p>hexo手册<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>butterfly文档<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a><br>改网站搜索免费社交图标<a href="https://fontawesome.com/v5.15/icons?d=gallery&amp;p=1&amp;m=free">https://fontawesome.com/v5.15/icons?d=gallery&amp;p=1&amp;m=free</a><br>改网站顶置图片<a href="https://pic.netbian.com/4kdongman/">https://pic.netbian.com/4kdongman/</a><br>live2d内容网站：<br>api:github.com&#x2F;fghrsh&#x2F;live2d_api<br>模型:github.com&#x2F;summerscar&#x2F;live2dDemo<br>参考:<a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a><br> waifu-tips.js 的详细设置说明，和 waifu-tips.json 节点说明，见<a href="https://github.com/fghrsh/live2d_demo">https://github.com/fghrsh/live2d_demo</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言03</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8003/</url>
    <content><![CDATA[<h1 id="c语言03"><a href="#c语言03" class="headerlink" title="c语言03"></a>c语言03</h1><h2 id="3-1-表达式"><a href="#3-1-表达式" class="headerlink" title="3.1 表达式"></a>3.1 表达式</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//表达式具备唯一返回值</span></span><br><span class="line">	<span class="comment">//,连接多个语句     =赋值    ;结束语句   ()提升优先级</span></span><br><span class="line">	<span class="comment">//赋值顺序右往左</span></span><br><span class="line">	<span class="comment">//目数（操作数个数）：单双三    如  ，双目    ；单目    ？：三目</span></span><br><span class="line">	<span class="comment">//a?b:c;即a真假，真则b假则c（非0真，0假）</span></span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">1</span>,<span class="number">2</span>;<span class="comment">//n=1</span></span><br><span class="line">	n = (<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//n=2</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-输出详解"><a href="#3-2-输出详解" class="headerlink" title="3.2 输出详解"></a>3.2 输出详解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//只用于输出字符   </span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;hahaha&quot;</span>);<span class="comment">//只用于输出字符串 ，并自动回车  </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,(<span class="type">int</span>) <span class="string">&quot;1&quot;</span>); </span><br><span class="line">    <span class="comment">//字符串总以\0结尾(可省略),返回的是地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hahahaha%d\n&quot;</span>, <span class="number">10</span>);<span class="comment">//无输出上限</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//char 1字节，中文 2字节 属于字符串</span></span><br><span class="line">	<span class="comment">//char中存的是ascii码   a对应97</span></span><br><span class="line">	<span class="comment">//字符集 char 1字节 wchar_t 2字节</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//小数存储 float（4字节） 1符号，8e（ieee规定存储的时候要加上一个中间值127或1023）,23科学计数  double(8字节) 1符号，11e,52科学计数（科学计数：只要一位整数且小数点前必为1所以省去，只保留的小数点后面的部分）(e绝对范围，科学计数绝对精度)</span></span><br><span class="line">	<span class="comment">//2进制科学计数法： 小数点后就是n1*1/2^1+n2*1/2^2+n3*1/2^3…… </span></span><br><span class="line">	<span class="comment">//无可避免的浮点误差0.1+0.2=0.3(存储方式问题)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/05/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>新年快乐</title>
    <url>/2022/02/05/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>#blog搭建完成(包括界面，live2d，音乐)（待完善）</p>
]]></content>
  </entry>
  <entry>
    <title>c语言05</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8005/</url>
    <content><![CDATA[<h1 id="c语言05"><a href="#c语言05" class="headerlink" title="c语言05"></a>c语言05</h1><h2 id="5-1-运算符"><a href="#5-1-运算符" class="headerlink" title="5.1 运算符"></a>5.1 运算符</h2><p>按位异或 ^ 同0异1<br>按位同或   同1异0（实现~和^一起用）<br>关系运算符   返回一定是逻辑值1真0假<br>指针只有NULL代表假，数值0就是假，\0是假，字符串自变量一定真因为返回的是地址<br>逻辑运算符<br>1、连接关系运算符，只看逻辑值,!逻辑非<br>2、&amp;&amp;和||具备短路性质，如果左值能决定那么右值不运算（优化）</p>
<p>注意运算符优先级!!!</p>
<p>注意在1&lt;a&lt;2按左到右计算1&lt;a返回0或1然后和&lt;2运算</p>
<p>0.0000000000000000000001放在float中还是有值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">	<span class="type">int</span> n = <span class="number">10</span>, m = <span class="number">20</span>;</span><br><span class="line">	<span class="type">int</span> temp = n;</span><br><span class="line">	n = m;</span><br><span class="line">	m = temp;</span><br><span class="line"></span><br><span class="line">	n = n + m;</span><br><span class="line">	m = n - m;</span><br><span class="line">	n = n - m;<span class="comment">//有范围上的缺陷</span></span><br><span class="line">	</span><br><span class="line">	n = n ^ m;<span class="comment">//1001^1100=0101</span></span><br><span class="line">	m = n ^ m;<span class="comment">//0101^1100=1001</span></span><br><span class="line">	n = n ^ m;<span class="comment">//0101^1001=1100</span></span><br><span class="line">	<span class="comment">//有两个可以推第三个</span></span><br><span class="line">	<span class="comment">//同或也可实现该功能</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;after swap:%d\n%d\n&quot;</span>, n, m);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 2</span></span><br><span class="line">	n = <span class="number">1</span>, m = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (n = <span class="number">6</span> &lt; <span class="number">3</span> &amp;&amp; (m == <span class="number">999</span>))</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>, n, m);<span class="comment">//输出0,2</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>, n, m);<span class="comment">//输出0,2</span></span><br><span class="line">	n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n == <span class="number">1</span> &gt;= <span class="number">0</span>);<span class="comment">//输出0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-if语句"><a href="#5-2-if语句" class="headerlink" title="5.2 if语句"></a>5.2 if语句</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">	;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">	;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	;</span><br><span class="line"><span class="comment">//以上属于一个if语句</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上属于一个if语句</span></span><br></pre></td></tr></table></figure>

<p>一个if可以有多个else if和一个else以此判断，但有一个满足，执行后立即跳出整个if语句</p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言06</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8006/</url>
    <content><![CDATA[<h1 id="c语言06"><a href="#c语言06" class="headerlink" title="c语言06"></a>c语言06</h1><h2 id="6-1-判断语句"><a href="#6-1-判断语句" class="headerlink" title="6.1 判断语句"></a>6.1 判断语句</h2><h3 id="6-1-1-if语句"><a href="#6-1-1-if语句" class="headerlink" title="6.1.1 if语句"></a>6.1.1 if语句</h3><p>上一篇已讲</p>
<h3 id="6-1-2-switch语句"><a href="#6-1-2-switch语句" class="headerlink" title="6.1.2 switch语句"></a>6.1.2 switch语句</h3><p>在多个if时考虑使用switch<br>在汇编底层，循环就是跳转jmp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (n) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:<span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">		<span class="number">2</span>; <span class="number">2</span>;</span><br><span class="line">	&#125;; <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:<span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不加{}只能加一条语句<br>语法限制：n要求只能返回整形值（不会帮你隐式转换）且case一定是值<br>swtich指从哪个case进入不break就会一直执行下面的</p>
<h2 id="6-2-goto语句"><a href="#6-2-goto语句" class="headerlink" title="6.2 goto语句"></a>6.2 goto语句</h2><p>用法：goto 标签d一般配合if使用</p>
<p>底层直接jmp</p>
<p>素数  m%(2到m-1)!&#x3D;0</p>
<p>判断素数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span><span class="comment">//c语言用布尔运算要加这个头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;	</span><br><span class="line">	<span class="type">bool</span> t;</span><br><span class="line">	t = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">flag:</span><br><span class="line">	<span class="keyword">if</span> (n% i == <span class="number">0</span>)t = <span class="literal">true</span>;</span><br><span class="line">	i++;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;n) <span class="keyword">goto</span> flag;<span class="comment">//写法</span></span><br><span class="line">	<span class="keyword">if</span> (t)<span class="built_in">printf</span>(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">    	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言04</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8004/</url>
    <content><![CDATA[<h1 id="c语言04"><a href="#c语言04" class="headerlink" title="c语言04"></a>c语言04</h1><h2 id="4-1-运算符"><a href="#4-1-运算符" class="headerlink" title="4.1 运算符"></a>4.1 运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>+-正负 + -  &#x2F; *  %</p>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>~  &amp;  |  ^  《  》</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>+&#x3D;    -&#x3D;    *&#x3D;    &#x2F;&#x3D;    %&#x3D;    &amp;&#x3D;  |&#x3D;   ^&#x3D;   &lt;&lt;&#x3D;  &gt;&gt;&#x3D;</p>
<h3 id="自运算法"><a href="#自运算法" class="headerlink" title="自运算法"></a>自运算法</h3><p>n–  n++  –n  ++n</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>！  &amp;&amp;   ||  </p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>&lt; &gt;  &#x3D;&#x3D;  ！&#x3D;  &gt;&#x3D;  &lt;&#x3D;</p>
<h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><p>：，  ；  #  &amp;  ？：   （） （） （）[]  []  {} &lt;&gt; ‘’  “”  *  .   -&gt;  \  &#x2F;   &#x2F;&#x2F;     &#x2F;*   @</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>除法运算10&#x2F;3&#x3D;3，注意类型；10&#x2F;3.0&#x3D;3.3（在cpp中强类型语言隐式转换会报错）<br>不同类型运算时，整形提升，类型提升为更大的数据类型<br>取余运算，全部按正的算，看%左取正负<br>自运算符号位置在前先自运算再执行，在后先执行再自运算  例：n&#x3D;6,n++ + ++n + n++ + ++n&#x3D;6+8+8+10&#x3D;32<br>位运算针对二进制：按位取反~    按位与&amp;（全真为真，用来保留位）    按位或|（有真就真）<br>n&lt;&lt;m;a&gt;&gt;b;n左移m位（补0），a右移b位（补符号位）<br>sizeof是关键字不是运算符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0x80000001</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x    %x\n&quot;</span>,n&lt;&lt;<span class="number">1</span>,n&gt;&gt;<span class="number">1</span>);<span class="comment">//输出中遇到\0认为是字符串结尾结束输出</span></span><br><span class="line">	n = <span class="number">6</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n++ + ++n + n++ + ++n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><p>不一定要main为入口，vs项目-&gt;属性-&gt;c&#x2F;cpp-&gt;链接器-&gt;入口</p>
<p>黑窗口只能输入十进制</p>
<p>关系符的混合使用要注意优先级，一般用  (  )  括起来，以免出差错</p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言07</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8007/</url>
    <content><![CDATA[<h1 id="c语言07"><a href="#c语言07" class="headerlink" title="c语言07"></a>c语言07</h1><h2 id="7-1-循环语句"><a href="#7-1-循环语句" class="headerlink" title="7.1 循环语句"></a>7.1 循环语句</h2><h3 id="循环如何结束"><a href="#循环如何结束" class="headerlink" title="循环如何结束"></a>循环如何结束</h3><p>1、逻辑值判断为假<br>2、break打断，直接跳出当前循环<br>3、goto无条件跳转,return结束函数,exit(0)程序正常退出exit(1)程序异常退出<br>4、continue跳过本次循环</p>
<h3 id="7-1-1-goto实现循环"><a href="#7-1-1-goto实现循环" class="headerlink" title="7.1.1 goto实现循环"></a>7.1.1 goto实现循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">loop:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">	n /= <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">0</span>)<span class="keyword">goto</span> loop;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-1-2-for语句"><a href="#7-1-2-for语句" class="headerlink" title="7.1.2 for语句"></a>7.1.2 for语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (;n&gt;<span class="number">0</span>;) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n % <span class="number">10</span>);</span><br><span class="line">		n / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for (n&#x3D;10; n &gt; 0;n–)<br>在括号里定义的变量属于局部变量，只用于该语句体<br>第一个表达式是初始化<br>第二个是判断条件真<br>则执行第三个表达式和语句体，然后回到第二个表达式</p>
<h3 id="7-1-3-while语句"><a href="#7-1-3-while语句" class="headerlink" title="7.1.3 while语句"></a>7.1.3 while语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断while后面（）中只要为真就执行后面的语句<br>执行语句后再进行判断</p>
<h3 id="7-1-4-do-while语句"><a href="#7-1-4-do-while语句" class="headerlink" title="7.1.4 do while语句"></a>7.1.4 do while语句</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (<span class="number">0</span>); </span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与while几乎没区别<br>进入语句时先执行一次<br>再判断while后面（）中只要为真就执行后面的语句<br>执行语句后再进行判断</p>
<h2 id="7-2-练习案例"><a href="#7-2-练习案例" class="headerlink" title="7.2 练习案例"></a>7.2 练习案例</h2><h3 id="7-2-1-九九乘法表"><a href="#7-2-1-九九乘法表" class="headerlink" title="7.2.1 九九乘法表"></a>7.2.1 九九乘法表</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == j + <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%2d   &quot;</span>, j, i, i * j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-斐波那契数列"><a href="#7-2-2-斐波那契数列" class="headerlink" title="7.2.2 斐波那契数列"></a>7.2.2 斐波那契数列</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> first = <span class="number">0</span>, second = <span class="number">1</span>, third,m=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">	third = first + second;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, third);</span><br><span class="line">	first = second;</span><br><span class="line">	second = third;</span><br><span class="line">	Sleep(<span class="number">2000</span>);</span><br><span class="line">	m += third;</span><br><span class="line">	c++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言08</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8008/</url>
    <content><![CDATA[<h1 id="c语言08"><a href="#c语言08" class="headerlink" title="c语言08"></a>c语言08</h1><h2 id="8-1-scanf输入"><a href="#8-1-scanf输入" class="headerlink" title="8.1 scanf输入"></a>8.1 scanf输入</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//&amp;是取地址符，&amp;n表示n的首地址</span></span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> m = &amp;n;</span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;, m);</span></span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;, &amp;n);//两条同理</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d，%c%d&quot;</span>, &amp;m,&amp;c, &amp;n);</span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;, &amp;n);</span></span><br><span class="line">	<span class="comment">//scanf(&quot;%c&quot;, &amp;c);</span></span><br><span class="line">	<span class="comment">//注意空格属于字符在输入时加空格会别%c识别</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d%c%d&quot;</span>, n, c, m);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-1-1-输入输出问题"><a href="#8-1-1-输入输出问题" class="headerlink" title="8.1.1 输入输出问题"></a>8.1.1 输入输出问题</h3><p>用fflush(流名称) 用于清空一个流</p>
<p>scanf在遇到空白，宽度结束，非法输入时，停止该数据输入<br>在遇到空白时会丢弃一个字符<br>注意enter包括\r回车 \n换行，\n没被丢弃可以赋予给%c<br>注意string，会读到\0即空白就停止<br>注意在scanf””中有格式其它的字符外会空读取，要保持格式一样</p>
<h3 id="8-1-2-格式字符："><a href="#8-1-2-格式字符：" class="headerlink" title="8.1.2 格式字符："></a>8.1.2 格式字符：</h3><p>%c读一个字符<br>%d读一个十进制<br>%o读一个八进制<br>%x读一个十六进制<br>%s读一个字符串<br>%f读一个浮点数e和g和lf同<br>%p读一个指针<br>%u读一个无符号十进制<br>%%读%<br>%e指数形式<br>%[]读[]里的字符合集,在[]中加^取反即不读<br>.n只留几位小数不进位<br>修饰符：<br>l长数据<br>h短数据<br>*空读一个数据<br>在%与格式之间加数字限定读入字符<br>(B)略去多个空白字符直至出现非空白字符;该条一般默认存在<br>(c)略去该个固定的字符</p>
<h2 id="8-2-指针基础"><a href="#8-2-指针基础" class="headerlink" title="8.2 指针基础"></a>8.2 指针基础</h2><p>cpu通过寄存器读内存<br>每个内存有一个地址</p>
<p>指针：首地址+类型（地址大小：地址位数 &#x3D; 寄存器位数 &#x3D; int &#x3D; 32位）<br>指针变量：用来存储指针的变量</p>
<h2 id="8-3-main函数的参数"><a href="#8-3-main函数的参数" class="headerlink" title="8.3 main函数的参数"></a>8.3 main函数的参数</h2><p>#include “stdafx.h”<br>包含了&lt;stdio.h&gt;和&lt;tchar.h&gt;,tchar又有#define _tmain main</p>
<p>int _tmain(int argc,char* argv][])<br>这个是windows提供对unicode和ansi字符集自动转换用的程序入口点，会根据宏改对应的函数签名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc,<span class="type">char</span>* argv][],<span class="type">char</span> **env )&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> m = （<span class="type">int</span>)&amp; n;<span class="comment">//cpp一定要强制转换</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, m);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//两者相同</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>argc和argv参数在用命令行编译程序时有用<br>第一个参数，用来统计程序运行时发送给main函数的命令行参数的个数，在VS中默认值为1，有参数时会自动改变<br>第二个参数，用来存放指向的字符串参数的指针数组，每一个元素指向一个参数<br>    各成员含义如下：<br>    argv[0]指向程序运行的全路径名<br>    argv[1]指向在DOS命令行中执行程序名后的第一个字符串<br>    argv[2]指向执行程序名后的第二个字符串<br>    argv[3]指向执行程序名后的第三个字符串<br>    argv[argc]为NULL<br>第三个参数，env[]的每一个元素都包含ENVVAR&#x3D;value形式的字符串<br>其中ENVVAR为环境变量，value为其对应的值，平时使用到的比较少</p>
<h3 id="实践方法"><a href="#实践方法" class="headerlink" title="实践方法"></a>实践方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>找到exe文件的所在文件夹<br>运行cmd<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“程序名.exe” 参数a 参数b 参数c</span><br></pre></td></tr></table></figure>

<p>便可运行程序，程序可通过argv[i]使用参数</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>vs中<br>项目-&gt;属性-&gt;调试-&gt;命令参数<br>输入所需参数即可<br>注意空格隔开</p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言09</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8009/</url>
    <content><![CDATA[<h1 id="c语言09"><a href="#c语言09" class="headerlink" title="c语言09"></a>c语言09</h1><h2 id="9-1-数组"><a href="#9-1-数组" class="headerlink" title="9.1 数组"></a>9.1 数组</h2><p>同普通变量一样，需要声明和定义<br>[]内必须是确定值(低版本)，有初始化可以不用</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>连续内存段</p>
<p>数组名绑定一块内存段，数组名的返回值是数组首地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> height = <span class="number">168</span>;</span><br><span class="line">	<span class="type">int</span> height6, height5, height4, height3, height2, height1;</span><br><span class="line">	<span class="type">int</span> height0[<span class="number">666</span>];</span><br><span class="line">	<span class="comment">//初始化（只有这个时候可以用=赋值）</span></span><br><span class="line">	<span class="comment">//没写的补0，什么都没写就不初始化，经典写法=&#123;0&#125;</span></span><br><span class="line">	<span class="type">int</span> a[<span class="number">6</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	<span class="comment">//访问：读，写</span></span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//数组下标（正整数）访问数组,可以超出定义即越界（0~n-1）但是</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="9-2-字符串"><a href="#9-2-字符串" class="headerlink" title="9.2 字符串"></a>9.2 字符串</h2><h3 id="区分"><a href="#区分" class="headerlink" title="区分"></a>区分</h3><p>字符串字面量(即字符)：（以\0结尾，没有会自动填充）以ascii码保存<br>字符数组：用数组存多个字符<br>字符指针(即字符类型的指针)</p>
<h3 id="ascii码"><a href="#ascii码" class="headerlink" title="ascii码"></a>ascii码</h3><p>‘0’&#x3D;0x30   ‘A’&#x3D;0x41  ‘a’&#x3D;0x61</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="string">&quot;afuab&quot;</span>;<span class="comment">//字符串返回值是首地址，类比数组，不可以给a赋值</span></span><br><span class="line">	<span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="string">&quot;afuab&quot;</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> str[<span class="number">5</span>] = <span class="string">&quot;abcde&quot;</span>;<span class="comment">//或者=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;&#125;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, str);<span class="comment">//注意：输出时一个个字符输出直到遇到\0</span></span><br><span class="line">	<span class="comment">//&quot;abcdef&quot;[0] = 1;//只读内存段（常量）不可修改</span></span><br><span class="line">	<span class="built_in">strcpy</span>(str,<span class="string">&quot;asd&quot;</span>);<span class="comment">//字符串拷贝，遇到\0结束</span></span><br><span class="line">	<span class="built_in">memcpy</span>(str,<span class="string">&quot;asf&quot;</span>,<span class="number">8</span>);<span class="comment">//内存拷贝，以字节为单位，可以无视类型</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-3-案例"><a href="#9-3-案例" class="headerlink" title="9.3 案例"></a>9.3 案例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//反向输出</span></span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(str);<span class="comment">//获取字符串长度，不包括\0</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="comment">//输出中文</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">	len = <span class="built_in">strlen</span>(str);<span class="comment">//一个中文占俩个字节</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i-=<span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, str[i<span class="number">-1</span>],str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言10</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8010/</url>
    <content><![CDATA[<h1 id="c语言10"><a href="#c语言10" class="headerlink" title="c语言10"></a>c语言10</h1><h2 id="10-1-函数"><a href="#10-1-函数" class="headerlink" title="10.1 函数"></a>10.1 函数</h2><p>函数也需要：声明，定义，使用<br>声明后才可以使用定义时参数可以只写类型<br>声明才可以使用函数<br>在前面定义相当于声明</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>定义返回类型 函数名（类型 参数列表（用, 隔开参数））</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>跳转：函数名的返回值是函数的地址<br>传参：以赋值形势（单向）<br>        值传递，地址传递，引用（cpp才有）<br>        ()内有void不允许传参，不然可以传任意参数,传参即初始化<br>返回：函数表达式被函数的返回值代替<br>        返回值不写的话,编译器会帮你默认返回int 0<br>        printf函数返回字节值<br>        (返回值都在eax里，printf占用后，不写默认返回字节数)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">1</span>);<span class="comment">//参数的使用</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="number">666</span>));</span><br><span class="line">    <span class="comment">//printf(&quot;%d&quot;, 666)是表达式，先执行，然后返回值，大小为输出了的字节数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n%d\n&quot;</span>, <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a),<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b));</span><br><span class="line">	<span class="comment">//scanf(&quot;%d&quot;,&amp;a)也是表达式，先执行，然后返回值，大小为输入了的字节数,多了的%d会输出</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="comment">//注意这里ab与上面输入刚好反序</span></span><br><span class="line">	<span class="comment">//reason:输出多个时，是从后面开始，因为先压栈的最后出，所以上面的先读了b</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h3><p>调用函数<br>        语言自带：&lt;stdio.h&gt; printf scanf<br>        系统自带 ：&lt;windows.h&gt; Sleep<br>        第三方库：&lt;winmm.lib&gt; mciSendString<br>自定义函数<br>多文档编程<br>        同一个工程中(只有一个main)拆分多个源文件，分出.h和.c文件<br>        include后加“头文件名.h”<br>        “”先在当前文件夹找，再去系统文件夹找；用&lt;&gt;直接去系统文件夹找<br>库 静态库 动态库</p>
<h3 id="函数查询"><a href="#函数查询" class="headerlink" title="函数查询"></a>函数查询</h3><p>选中函数然后F1可以看函数怎么用<br>选中函数然后F12可以看函数原型（其实是看库内定义）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span><span class="comment">//这个就是函数的声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;winmm.lib&quot;</span>)<span class="comment">//加静态库（library）</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line">function() &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;函数建立&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line">swap(<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = function(),m=<span class="number">1</span>;</span><br><span class="line">	swap(n, m);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, n,m);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置定义，在前处已经声明了</span></span><br><span class="line">swap(<span class="type">int</span> a,<span class="type">int</span> b) &#123;</span><br><span class="line">	<span class="type">int</span> temp = a; a = b; b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言11</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8011/</url>
    <content><![CDATA[<h1 id="c语言11"><a href="#c语言11" class="headerlink" title="c语言11"></a>c语言11</h1><h2 id="11-1-指针解引用"><a href="#11-1-指针解引用" class="headerlink" title="11.1 指针解引用"></a>11.1 指针解引用</h2><p>int n;&#x2F;&#x2F;n绑定了一个内存段，用n就是引用这个内存段<br>解：解析，解释，解读<br>解引用*单目运算符，右操作数是指针，一个带类型的首地址，返回一个内存段指针数学运算，带类型运算</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//定义： 类型* 变量</span></span><br><span class="line">	<span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* p;<span class="comment">//储存一个int类型内存段的指针</span></span><br><span class="line">	</span><br><span class="line">	p = &amp;n;<span class="comment">//&amp;取n首地址，给p</span></span><br><span class="line">	<span class="comment">//指针变量p指向n（指针变量p绑定的内存段中保存着变量n的首地址）</span></span><br><span class="line">	*p = <span class="number">1</span>;<span class="comment">//可写，返回的是一个内存段，*p实际上就等同于n</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//其他赋值	</span></span><br><span class="line">    <span class="type">int</span>* w = <span class="number">0x11223344</span>;<span class="comment">//可以直接人工给地址，一般不会用	</span></span><br><span class="line">	<span class="type">char</span>* q = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">	<span class="comment">//拿到1234四个字符的首地址(字符1的地址（字符串,一个一个字符存/数字是直接一整个存）)放在q）</span></span><br><span class="line">	p = q;<span class="comment">//把存在q中的地址复制到p中</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %x\n&quot;</span>, *p,*q);<span class="comment">//输出ascii码从字符1开始</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//运算</span></span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">	<span class="type">char</span> *a= arr;</span><br><span class="line">	<span class="type">int</span>* b = arr;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *a);<span class="comment">//1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *b);<span class="comment">//1</span></span><br><span class="line">	a += <span class="number">1</span>;</span><br><span class="line">	b += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *a);<span class="comment">//0</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *b);<span class="comment">//2</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-2-指针与数组"><a href="#11-2-指针与数组" class="headerlink" title="11.2 指针与数组"></a>11.2 指针与数组</h2><h3 id="利用指针访问数组"><a href="#利用指针访问数组" class="headerlink" title="利用指针访问数组"></a>利用指针访问数组</h3><p>[]在访问时的意思是，读该偏移地址的值<br>数组[i]  等同于  首地址+i后解引用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span>* str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">	<span class="type">char</span> arr[] = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line">	<span class="comment">//下标访问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="string">&quot;abcdefg&quot;</span>[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="comment">//指针访问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *(str+i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,* (<span class="string">&quot;abcdefg&quot;</span>+i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组名的返回"><a href="#数组名的返回" class="headerlink" title="数组名的返回"></a>数组名的返回</h3><p>地址返回值包括：带类型的地址</p>
<p>数组名的返回值是第一个元素的地址<br>        即元素类型的地址<br>        所以数组名不是首地址</p>
<p>&amp;数组名的返回值是数组类型地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">2</span>] = &#123; <span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, arr );<span class="comment">//,返回第一个元素的首地址，单位是int类型，</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, &amp;arr );<span class="comment">//取整个数组的首地址,类型是int数组类型</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, &amp;arr + <span class="number">1</span>);<span class="comment">//相当于加了一个数组长度,8字节</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, arr + <span class="number">1</span>);<span class="comment">//只加了4个字节</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-3-指针数组和数组指针区别"><a href="#11-3-指针数组和数组指针区别" class="headerlink" title="11.3 指针数组和数组指针区别"></a>11.3 指针数组和数组指针区别</h2><p>数组就是多个相同类型整合成一个，<br>指针数组就是多个同类型的指针整合起来<br>int*[] p则是定义一个元素为int类型指针的数组</p>
<p>数组指针则是&amp;数组名</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span>* parr[<span class="number">2</span>] = &#123;&amp;arr[<span class="number">0</span>],&amp; arr[<span class="number">1</span>]&#125;;</span><br><span class="line">	<span class="type">int</span>* p[] = &#123; <span class="string">&quot;asd123asd&quot;</span>,<span class="string">&quot;qwe456qwe&quot;</span>,<span class="string">&quot;zxc789zxc&quot;</span> &#125;;</span><br><span class="line">	<span class="comment">//int* (p[])= &#123; &quot;asd&quot;, &quot;qwe&quot;, &quot;zxc&quot; &#125;同上;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*((<span class="type">char</span>*)p[<span class="number">0</span>]+<span class="number">1</span>));<span class="comment">//注意类型不同		</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ((<span class="type">char</span>*)p[<span class="number">0</span>])[<span class="number">1</span>]);<span class="comment">//同上				</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p[<span class="number">0</span>][<span class="number">1</span>]);<span class="comment">//先执行p[0]得到地址，但指针类型不变还是int，[1]就加4字节,注意此处与二位数组不同</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言12</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8012/</url>
    <content><![CDATA[<h1 id="c语言12"><a href="#c语言12" class="headerlink" title="c语言12"></a>c语言12</h1><h2 id="12-1-内存分配"><a href="#12-1-内存分配" class="headerlink" title="12.1 内存分配"></a>12.1 内存分配</h2><p>每一个应用程序都有一个4G 虚拟内存<br>内存有申请和释放（内存泄漏：使用完没有及时释放）</p>
<h3 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h3><p>定义变量的时候自动分配了对应大小的内存<br>系统会在对应时期自动释放<br>泄露可能性小，但是不能自由使用内存</p>
<h3 id="手动分配"><a href="#手动分配" class="headerlink" title="手动分配"></a>手动分配</h3><p>需要头文件stdlib.h</p>
<p>使用：malloc(memory alloce)<br>返回值为void*，类型在分配后绑定<br>free解除绑定，即取消这块内存的使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">void</span>* p = <span class="built_in">malloc</span>(<span class="number">1024</span>);<span class="comment">//void是无类型即任意</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == p) <span class="built_in">printf</span>(<span class="string">&quot;申请失败&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;申请成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> name[] = <span class="string">&quot;名字&quot;</span>;</span><br><span class="line">	<span class="type">int</span> age = <span class="number">16</span>;</span><br><span class="line">	<span class="type">char</span> sex = <span class="string">&quot;f&quot;</span>;</span><br><span class="line">	<span class="type">double</span> score = <span class="number">66.66</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span>* pTemp = p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//以下给对应内存赋值</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">strcpy</span>(pTemp, name);<span class="comment">//memcpy(pTemp,name,len)</span></span><br><span class="line">	<span class="comment">//注意前者不会检查oTemp中是否有足够长度给name,可能导致缓冲区溢出</span></span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(name);<span class="comment">//长度为\0前的字符数量</span></span><br><span class="line">	pTemp += len;<span class="comment">//加上长度，改变输出位置</span></span><br><span class="line">	</span><br><span class="line">	*((<span class="type">int</span>*)pTemp )= age;<span class="comment">//赋值记得改变类型</span></span><br><span class="line">	</span><br><span class="line">	pTemp += <span class="number">4</span>;</span><br><span class="line">	</span><br><span class="line">	*pTemp = sex;</span><br><span class="line">	</span><br><span class="line">	pTemp += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	*((<span class="type">double</span>*)pTemp) = score;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取</span></span><br><span class="line">	pTemp = p;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//printf(&quot;%s&quot;, pTemp);</span></span><br><span class="line">	<span class="comment">//注意这个不行因为在字符串复制时没有\0结束符(strlen不计算\0导致被覆盖)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *pTemp++);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *((<span class="type">int</span>*)pTemp));</span><br><span class="line">	pTemp += <span class="number">4</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *pTemp);</span><br><span class="line">	pTemp += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, *((<span class="type">double</span>*)pTemp));</span><br><span class="line">	<span class="built_in">free</span>(p);<span class="comment">//解除绑定</span></span><br><span class="line">	p = <span class="literal">NULL</span>;<span class="comment">//取消指针</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放再读也可以，但是可能被其他变量占用而读出乱码</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *pTemp++);<span class="comment">//这里++优	先级高，先对pTemp进行修改</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *((<span class="type">int</span>*)pTemp));</span><br><span class="line">	pTemp += <span class="number">4</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *pTemp);</span><br><span class="line">	pTemp += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, *((<span class="type">double</span>*)pTemp));</span><br><span class="line">	pTemp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-2-生命周期"><a href="#12-2-生命周期" class="headerlink" title="12.2 生命周期"></a>12.2 生命周期</h2><h3 id="变量位置和状态"><a href="#变量位置和状态" class="headerlink" title="变量位置和状态"></a>变量位置和状态</h3><p>全局    main前面        声明到程序结束<br>局部    函数里面        声明到函数结束<br>全局静态static修饰        声明到程序结束<br>局部静态static修饰        声明到程序结束<br>堆        手动分配内存    申请到释放        </p>
<h3 id="规则-程序运行时"><a href="#规则-程序运行时" class="headerlink" title="规则(程序运行时)"></a>规则(程序运行时)</h3><p>自己申请的内存只能自己释放<br>一般在{}内定义的变量，离开{}自动释放<br>static变量，不会被释放<br>全局变量，不会被释放</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span>  a)</span> &#123;</span><br><span class="line">	<span class="type">int</span>* p = <span class="built_in">malloc</span>(<span class="number">10</span>);<span class="comment">//malloc返回首地址和类型</span></span><br><span class="line">	<span class="comment">//可以返回p，没危险</span></span><br><span class="line">	<span class="comment">//这里绑定了内存,要自己释放</span></span><br><span class="line">	<span class="comment">//所以申请后一定返回p，不然没法释放</span></span><br><span class="line">	a += <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> &amp;a;</span><br><span class="line">	<span class="comment">//返回变量地址危险，因为a是局部变量，分配的内存会自动释放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span>* ptr;<span class="comment">//野指针，不知道指向哪里所以危险</span></span><br><span class="line">	<span class="type">int</span>* p = f(<span class="number">656</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (*p)+<span class="number">222</span>);<span class="comment">// 能用但是很危险</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="12-3-变量作用-使用-域"><a href="#12-3-变量作用-使用-域" class="headerlink" title="12.3 变量作用(使用)域"></a>12.3 变量作用(使用)域</h2><h3 id="内存四区"><a href="#内存四区" class="headerlink" title="内存四区"></a>内存四区</h3><p>栈：编译器自动分配释放参数，局部变量<br>堆：程序员手动分配的内存区，程序结束由os统一回收<br>全局（静态）区（bss（未初始化（都是0）的全局变量））：const修饰常量为只读且要初始化，全局变量，静态变量<br>全局（常量）区放着常量字符串，我们定义是从这里拷贝，程序结束os回收<br>代码区：函数</p>
<h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>修饰变量为静态变量（默认初始化为0）只对当前文件可见<br>再定义保留上一次的值（即不销毁）<br>局部static和全局static的区别只是作用(使用)域不同</p>
<h3 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h3><p>对其他c文件可见，函数和全局变量默认extern</p>
<h3 id="变量重名问题"><a href="#变量重名问题" class="headerlink" title="变量重名问题"></a>变量重名问题</h3><p>等同作用域内不可以重名</p>
<p>在同一作用域中，就近原则</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言13</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8013/</url>
    <content><![CDATA[<h1 id="c语言13"><a href="#c语言13" class="headerlink" title="c语言13"></a>c语言13</h1><h2 id="13-1-多维数组"><a href="#13-1-多维数组" class="headerlink" title="13.1 多维数组"></a>13.1 多维数组</h2><p>元素是数组的数组</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>最底层元素类型 数组名 [一维数] [二维数]</p>
<h3 id="二维数组元素类型"><a href="#二维数组元素类型" class="headerlink" title="二维数组元素类型"></a>二维数组元素类型</h3><p>最底层元素类型（）[二维数]</p>
<h3 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">4</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,<span class="comment">//arr第一个元素</span></span><br><span class="line">		<span class="comment">//&#123;1，1，1，1&#125;中每个元素是arr[0]的每个元素</span></span><br><span class="line">		&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,<span class="comment">//arr第二个元素</span></span><br><span class="line">		&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;,<span class="comment">//arr第三个元素</span></span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>&#125;,<span class="comment">//arr第四个元素</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> arr1[<span class="number">4</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">	<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,</span><br><span class="line">	<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,</span><br><span class="line">	<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,</span><br><span class="line">	<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span></span><br><span class="line">	&#125;;<span class="comment">//与arr是相同定义</span></span><br><span class="line">	<span class="comment">//可见申请也是以一维数组方式申请,连续,即：</span></span><br><span class="line">	<span class="type">int</span>* parr = <span class="built_in">malloc</span>(<span class="number">4</span> * <span class="number">4</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">		parr[i] = arr[i / <span class="number">4</span>][i % <span class="number">4</span>];<span class="comment">//访问时位移[第一个]*[第二个定义]+[第二个]</span></span><br><span class="line">	parr = &amp;arr;<span class="comment">//与上结果同</span></span><br><span class="line">	<span class="comment">//一般访问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr[j][i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, arr1[j][i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *(parr+i+j*<span class="number">4</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-2-数组指针"><a href="#13-2-数组指针" class="headerlink" title="13.2 数组指针"></a>13.2 数组指针</h2><p>二维数组元素类型是一维数组类型</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>[ ]的优先级高于*</p>
<p>int (*p)[4]  指  指针指向数组的类型为int [4]</p>
<p>int *(p[4])  指  类型为指针的数组</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span>*(pa[<span class="number">3</span>])[<span class="number">7</span>];<span class="comment">//数组容量为3，存储容量为7的数组的指针（指针数组）</span></span><br><span class="line">	<span class="type">int</span>* ps[<span class="number">3</span>][<span class="number">7</span>];<span class="comment">//同上</span></span><br><span class="line">	<span class="type">int</span> ((*pd)[<span class="number">7</span>])[<span class="number">3</span>];<span class="comment">//指针（数组指针）</span></span><br><span class="line">	<span class="type">int</span>(*pf)[<span class="number">7</span>][<span class="number">3</span>];<span class="comment">//同上</span></span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> arr[<span class="number">3</span>] = &#123; <span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">int</span>(*p1)[<span class="number">3</span>] = &amp;arr;<span class="comment">//数组的指针</span></span><br><span class="line">	<span class="type">int</span>* p2 = arr;<span class="comment">//数组第一个元素的指针</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n%c&quot;</span>, *p1, *p2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>arr[0] 的类型是int</p>
<p>&amp;arr[0]的类型是int*</p>
<p>arr的类型是int*</p>
<p>&amp;arr的类型是int(*)[]</p>
<p>arr的值等于&amp;arr但类型不同</p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言14</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8014/</url>
    <content><![CDATA[<h1 id="c语言14"><a href="#c语言14" class="headerlink" title="c语言14"></a>c语言14</h1><h2 id="项目：打砖块"><a href="#项目：打砖块" class="headerlink" title="项目：打砖块"></a>项目：打砖块</h2><p>代码流程：<br>显示<br>移动<br>检查判断<br>显示</p>
<p>注意：需要easyX图形库</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span>  <span class="comment">//easyX  库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;conio.h&gt;</span> <span class="comment">//键入检测的库</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zk_w 200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zk_h 100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zk_r 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> zk_c 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> win_h 800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> win_w zk_c*zk_w</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bz_h 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bz_w 300</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> zk[zk_r][zk_c] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> game = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> vx = <span class="number">3</span>, vy = <span class="number">-3</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawgame</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ctrl</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawball</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawzk</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawzkall</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawbz</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check1</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check2</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bzmove</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ballmove</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> bz_x = (win_w - bz_w) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> bz_y = (win_h - bz_h);</span><br><span class="line"><span class="type">int</span> bx = win_w / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> by = win_h - bz_h - r;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	initgraph(win_w,win_h, SHOWCONSOLE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (game) &#123;</span><br><span class="line">		drawgame();</span><br><span class="line">		ctrl();</span><br><span class="line">		</span><br><span class="line">		Sleep(<span class="number">10</span>);</span><br><span class="line">		<span class="comment">//zk[1][1] = 1;</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawgame</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	BeginBatchDraw();</span><br><span class="line">	cleardevice();</span><br><span class="line">	drawzkall();</span><br><span class="line">	drawbz();</span><br><span class="line">	drawball();</span><br><span class="line">	EndBatchDraw();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ctrl</span><span class="params">()</span> &#123;</span><br><span class="line">	check1();</span><br><span class="line">	check2();</span><br><span class="line">	bzmove();</span><br><span class="line">	ballmove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawball</span><span class="params">()</span> &#123;</span><br><span class="line">	setlinecolor(RED);</span><br><span class="line">	setfillcolor(GREEN);</span><br><span class="line">	fillcircle(bx, by, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawzk</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> &#123;</span><br><span class="line">	setlinecolor(GREEN);</span><br><span class="line">	setfillcolor(RED);</span><br><span class="line">	<span class="keyword">if</span> (zk[x][y] ==<span class="literal">false</span>) &#123;</span><br><span class="line">		fillrectangle(y * zk_w, x * zk_h, (y+<span class="number">1</span>)*zk_w,(x+<span class="number">1</span>)*zk_h);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawzkall</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; zk_r; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; zk_c; j++)</span><br><span class="line">			drawzk(i,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawbz</span><span class="params">()</span> &#123;</span><br><span class="line">	setlinecolor(RED);</span><br><span class="line">	setfillcolor(YELLOW);</span><br><span class="line">	fillrectangle(bz_x, bz_y, bz_x + bz_w, bz_y + bz_h);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check1</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> ((vx &gt; <span class="number">0</span>) &amp;&amp; <span class="comment">//球往右边走</span></span><br><span class="line">		(bx &gt;= (win_w - r))) &#123;<span class="comment">//撞上了右边沿</span></span><br><span class="line">		vx = <span class="number">-3</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//检测球是否撞上左边沿</span></span><br><span class="line">	<span class="keyword">if</span> ((vx &lt; <span class="number">0</span>) &amp;&amp; <span class="comment">//球往左边走</span></span><br><span class="line">		(bx &lt;= r)) &#123;<span class="comment">//撞上了左边沿</span></span><br><span class="line">		vx = <span class="number">3</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//检测球是否撞上上边沿</span></span><br><span class="line">	<span class="keyword">if</span> ((vy &lt; <span class="number">0</span>) &amp;&amp; <span class="comment">//球往上边走</span></span><br><span class="line">		(by &lt;= r)) &#123;<span class="comment">//撞上了上边沿</span></span><br><span class="line">		vy = <span class="number">3</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//检测球是否撞上下边沿</span></span><br><span class="line">	<span class="keyword">if</span> ((vy &gt; <span class="number">0</span>) &amp;&amp; <span class="comment">//球往下边走</span></span><br><span class="line">		(by &gt;= (win_h - r))) &#123;<span class="comment">//撞上了下边沿</span></span><br><span class="line">		game = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//检测球是否撞上板子</span></span><br><span class="line">	<span class="keyword">if</span> ((vy &gt; <span class="number">0</span>) &amp;&amp;</span><br><span class="line">		(by &gt;= (bz_y - r)) &amp;&amp;<span class="comment">//球y坐标</span></span><br><span class="line">		(bx &gt;= bz_x) &amp;&amp;</span><br><span class="line">		(bx &lt;= (bz_x + bz_w))) &#123;</span><br><span class="line">		vy = <span class="number">-3</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">check2</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; zk_r; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; zk_c; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (zk[i][j] == <span class="literal">false</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (bx &gt;= j * zk_w - r &amp;&amp; bx &lt;= j * zk_w + r + <span class="number">5</span> &amp;&amp; by &gt;= i * zk_h &amp;&amp; by &lt;= (i + <span class="number">1</span>) * zk_h) &#123;<span class="comment">//左</span></span><br><span class="line">					zk[i][j] = <span class="number">1</span>;</span><br><span class="line">					vx = <span class="number">-3</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (bx &lt;= (j+<span class="number">1</span>) * zk_w + r &amp;&amp; bx &gt;= (j+<span class="number">1</span>) * zk_w - r - <span class="number">5</span> &amp;&amp; by &gt;= i * zk_h &amp;&amp; by &lt;= (i + <span class="number">1</span>) * zk_h) &#123;<span class="comment">//右</span></span><br><span class="line">					zk[i][j] = <span class="number">1</span>;</span><br><span class="line">					vx = <span class="number">3</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (by &gt;= i * zk_h &amp;&amp; by &lt;= i * zk_h - <span class="number">5</span> &amp;&amp; bx &gt;= j * zk_w &amp;&amp; bx &lt;= (j + <span class="number">1</span>) * zk_w) &#123;<span class="comment">//上</span></span><br><span class="line">					zk[i][j] = <span class="number">1</span>;</span><br><span class="line">					vy = <span class="number">-3</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (by&lt;=(i+<span class="number">1</span>)*zk_h&amp;&amp;by&gt;= (i + <span class="number">1</span>) * zk_h<span class="number">-5</span> &amp;&amp; bx &gt;= j * zk_w &amp;&amp; bx &lt;= (j + <span class="number">1</span>) * zk_w) &#123;<span class="comment">//下</span></span><br><span class="line">					zk[i][j] = <span class="number">1</span>;</span><br><span class="line">					vy = <span class="number">3</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bzmove</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">true</span> == _kbhit()) &#123;</span><br><span class="line">		<span class="type">int</span> ch = _getch();</span><br><span class="line">		<span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">75</span>:</span><br><span class="line">				<span class="keyword">if</span>(bz_x&gt;<span class="number">0</span>)</span><br><span class="line">				bz_x -= <span class="number">5</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">			<span class="keyword">case</span> <span class="number">77</span>:</span><br><span class="line">				<span class="keyword">if</span> (bz_x &lt; win_w-bz_w )</span><br><span class="line">				bz_x += <span class="number">5</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ballmove</span><span class="params">()</span> &#123;</span><br><span class="line">	bx += vx;</span><br><span class="line">	by += vy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言16</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8016/</url>
    <content><![CDATA[<h1 id="c语言16"><a href="#c语言16" class="headerlink" title="c语言16"></a>c语言16</h1><h2 id="16-1-结构体"><a href="#16-1-结构体" class="headerlink" title="16.1 结构体"></a>16.1 结构体</h2><p>用于自定义类型</p>
<h3 id="声明方式"><a href="#声明方式" class="headerlink" title="声明方式"></a>声明方式</h3><p>struct 结构名{</p>
<p>包含变量</p>
<p>}可定义变量名；</p>
<h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><p>struct 结构名 变量名；</p>
<p>结构体内内存连续可以直接用&#x3D;{}来初始化</p>
<p>也可以 .包含变量名&#x3D; 来固定初始化</p>
<h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>结构体变量.包含变量</p>
<p>结构体变量指针-&gt;包含变量</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">double</span> ywScore;</span><br><span class="line">	<span class="type">double</span> sxScore;</span><br><span class="line">	<span class="type">double</span> cScore;</span><br><span class="line">&#125;s2,s3;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//定义</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s1</span> =</span> &#123; <span class="string">&quot;a&quot;</span> ,<span class="number">1</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s2</span> =</span> &#123; .id=<span class="number">2</span>,.cScore=<span class="number">66</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//.访问</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s(%d):%lf %lf %lf&quot;</span>, 						s1.name[<span class="number">20</span>],s1.id,s1.ywScore,s1.sxScore,s1.cScore);</span><br><span class="line">	<span class="built_in">strcpy</span>(s1.name[<span class="number">20</span>], <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s(%d):%lf %lf %lf&quot;</span>, s1.name[<span class="number">20</span>], s1.id, s1.ywScore, s1.sxScore, s1.cScore);</span><br><span class="line">	<span class="comment">//-&gt;访问</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">ps1</span>;</span></span><br><span class="line">	ps1 = &amp;s1;</span><br><span class="line">	(*ps1).id = <span class="number">3</span>;</span><br><span class="line">	ps1-&gt;id = <span class="number">3</span>;<span class="comment">//同上</span></span><br><span class="line">	<span class="built_in">strcpy</span>((*ps1).name[<span class="number">20</span>], <span class="string">&quot;李四&quot;</span>);<span class="comment">//指针是一样的用法</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="16-2-结构体数组"><a href="#16-2-结构体数组" class="headerlink" title="16.2 结构体数组"></a>16.2 结构体数组</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[5] =</span> &#123;</span><br><span class="line">	&#123;<span class="string">&quot;a&quot;</span><span class="comment">/*&#123;&#x27;a&#x27;&#125;*/</span> ,<span class="number">1</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,		</span><br><span class="line">    &#123;<span class="string">&quot;a&quot;</span><span class="comment">/*&#123;&#x27;a&#x27;&#125;*/</span> ,<span class="number">1</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;a&quot;</span><span class="comment">/*&#123;&#x27;a&#x27;&#125;*/</span> ,<span class="number">1</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;a&quot;</span><span class="comment">/*&#123;&#x27;a&#x27;&#125;*/</span> ,<span class="number">1</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;a&quot;</span><span class="comment">/*&#123;&#x27;a&#x27;&#125;*/</span> ,<span class="number">1</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span>* <span class="title">p</span>=</span>arr;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d \n&quot;</span>,arr[<span class="number">1</span>].id,p[<span class="number">1</span>].id,(p+<span class="number">1</span>)-&gt;id,(arr+<span class="number">1</span>)-&gt;id);</span><br><span class="line">	<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student);<span class="comment">//获取结构体的大小</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言15</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8015/</url>
    <content><![CDATA[<h1 id="c语言15"><a href="#c语言15" class="headerlink" title="c语言15"></a>c语言15</h1><h2 id="15-1-多文档编程"><a href="#15-1-多文档编程" class="headerlink" title="15.1 多文档编程"></a>15.1 多文档编程</h2><h3 id="h中写声明"><a href="#h中写声明" class="headerlink" title=".h中写声明"></a>.h中写声明</h3><p>在.h中的定义，属于全局变量</p>
<p>其他里有全局定义，其他文件靠extern接口来寻找该变量，注意不可以初始化</p>
<h3 id="其他-c中写函数定义"><a href="#其他-c中写函数定义" class="headerlink" title="其他.c中写函数定义"></a>其他.c中写函数定义</h3><p>传参：在传变量时是单向的，要传地址才能改变变量的值(真实工作中)</p>
<h3 id="main-c中写变量定义和main"><a href="#main-c中写变量定义和main" class="headerlink" title="main.c中写变量定义和main"></a>main.c中写变量定义和main</h3><p>所有.c都要包括.h</p>
<p>一般不再.h中定义，因为以免用库导致包含库重复</p>
]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言17</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8017/</url>
    <content><![CDATA[<h1 id="c语言17"><a href="#c语言17" class="headerlink" title="c语言17"></a>c语言17</h1><h2 id="17-1-链表"><a href="#17-1-链表" class="headerlink" title="17.1 链表"></a>17.1 链表</h2><p>包含内容：</p>
<p>创建节点类型</p>
<p>创建节点的函数</p>
<p>查找节点地址</p>
<p>遍历，输出所有节点</p>
<p>插入(头，尾，中间)</p>
<p>删除</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> n;<span class="comment">//数据</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNext</span>;</span><span class="comment">//下一个节点类型的指针变量，用于连接</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">CreatNode</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">findPos</span><span class="params">(<span class="keyword">struct</span> Node* <span class="built_in">list</span>, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertToHead</span><span class="params">(<span class="type">int</span> n, <span class="keyword">struct</span> Node** <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertToTail</span><span class="params">(<span class="type">int</span> n, <span class="keyword">struct</span> Node* <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertBehind</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> a, <span class="keyword">struct</span> Node* <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">travel</span><span class="params">(<span class="keyword">struct</span> Node* <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">view</span><span class="params">(<span class="keyword">struct</span> Node* <span class="built_in">list</span>, <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">deleteNode</span><span class="params">(<span class="keyword">struct</span> Node** <span class="built_in">list</span>, <span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//pList可以指向一个列表</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pList</span> ;</span></span><br><span class="line">	<span class="comment">//创建调用</span></span><br><span class="line">	pList = CreatNode(<span class="number">2</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">	insertToHead(<span class="number">15</span>, &amp;pList);<span class="comment">//15 2</span></span><br><span class="line"></span><br><span class="line">	travel(pList);</span><br><span class="line"></span><br><span class="line">	insertToTail(<span class="number">3</span>, pList);<span class="comment">//15 2 3</span></span><br><span class="line"></span><br><span class="line">	travel(pList);</span><br><span class="line"></span><br><span class="line">	insertBehind(<span class="number">4</span>, <span class="number">1</span>, pList);<span class="comment">//15 4 2 3</span></span><br><span class="line"></span><br><span class="line">	insertBehind(<span class="number">888</span>, <span class="number">888</span>, pList);<span class="comment">//15 4 2 3 888</span></span><br><span class="line"></span><br><span class="line">	travel(pList);</span><br><span class="line"></span><br><span class="line">	<span class="type">bool</span> a =deleteNode(&amp;pList, <span class="number">2</span>);<span class="comment">//15 2 3 888</span></span><br><span class="line">	<span class="keyword">if</span> (a == <span class="literal">true</span>)<span class="built_in">printf</span>(<span class="string">&quot;删除成功\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;删除失败\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	travel(pList);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建节点的函数</span></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">CreatNode</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNew</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node*));<span class="comment">//分配一个节点大小的内存</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == pNew) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pNew-&gt;n = n;</span><br><span class="line">	pNew-&gt;pNext = <span class="literal">NULL</span>;<span class="comment">//给该内存赋值</span></span><br><span class="line">	<span class="keyword">return</span> pNew;<span class="comment">//返回该内存地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找节点地址</span></span><br><span class="line"><span class="keyword">struct</span> Node* <span class="title function_">findPos</span><span class="params">(<span class="keyword">struct</span> Node* <span class="built_in">list</span>, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num<span class="number">-1</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">list</span> = <span class="built_in">list</span>-&gt;pNext;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertToHead</span><span class="params">(<span class="type">int</span> n,<span class="keyword">struct</span> Node**<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">list</span> || <span class="literal">NULL</span> == *<span class="built_in">list</span>)<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//防呆</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (*<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;<span class="comment">//如果是空列表</span></span><br><span class="line">		*<span class="built_in">list</span> = CreatNode(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">struct</span> Node* pNew = CreatNode(n);</span><br><span class="line">		pNew-&gt;pNext = *<span class="built_in">list</span>;<span class="comment">//先把list指向的地址给到该节点</span></span><br><span class="line">		*<span class="built_in">list</span> = pNew;<span class="comment">//再把该节点给list</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertToTail</span><span class="params">(<span class="type">int</span> n, <span class="keyword">struct</span> Node*list1)</span> &#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">list</span> =</span> list1;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">list</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">list</span>-&gt;pNext) &#123;</span><br><span class="line">			<span class="built_in">list</span>-&gt;pNext = CreatNode(n);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">list</span> = <span class="built_in">list</span>-&gt;pNext;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中间插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertBehind</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> a,<span class="keyword">struct</span> Node* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pNew</span> =</span> CreatNode(n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; a; i++) &#123;<span class="comment">//注意1个直接就是第一个节点所以只用n-1次</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">list</span>-&gt;pNext) &#123;</span><br><span class="line">			insertToTail(n, <span class="built_in">list</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">list</span> = <span class="built_in">list</span>-&gt;pNext;<span class="comment">//循环遍历到要插入其后的节点</span></span><br><span class="line">	&#125;</span><br><span class="line">	pNew-&gt;pNext = <span class="built_in">list</span>-&gt;pNext;<span class="comment">//先把原先指向下一节点的指针给新插入的节点</span></span><br><span class="line">	<span class="built_in">list</span>-&gt;pNext = pNew;<span class="comment">//再把该节点的地址给上面的节点</span></span><br><span class="line">	<span class="comment">//一定是先获取节点地址再连接新节点</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历（链表查看）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">travel</span><span class="params">(<span class="keyword">struct</span> Node* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="comment">/*NULL != */</span> <span class="built_in">list</span>) &#123;</span><br><span class="line">		<span class="comment">//if (NULL == pTemp) break;</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">list</span>-&gt;n);</span><br><span class="line">		<span class="built_in">list</span> = <span class="built_in">list</span>-&gt;pNext;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">view</span><span class="params">(<span class="keyword">struct</span> Node* <span class="built_in">list</span>,<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">list</span> = <span class="built_in">list</span>-&gt;pNext;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\%d&quot;</span>,<span class="built_in">list</span>-&gt;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(按位置)删除节点</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">deleteNode</span><span class="params">(<span class="keyword">struct</span> Node** <span class="built_in">list</span>, <span class="type">int</span> num)</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">list</span> || <span class="literal">NULL</span> == *<span class="built_in">list</span>)<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//防呆</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、先找到，找不到，删除失败</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pDeleteNode</span> =</span> findPos(*<span class="built_in">list</span>, num);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == pDeleteNode) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="comment">//2、找到了，区分头和其他节点</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//头 换头 删除	</span></span><br><span class="line">	<span class="keyword">if</span> (*<span class="built_in">list</span> == pDeleteNode) &#123;</span><br><span class="line">		*<span class="built_in">list</span> = pDeleteNode-&gt;pNext;</span><br><span class="line">		<span class="built_in">free</span>(pDeleteNode);</span><br><span class="line">		pDeleteNode = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//其他 前一个连后一个 删除</span></span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">struct</span> Node* pDeletePreNode = findPos(*<span class="built_in">list</span>, num - <span class="number">1</span>);<span class="comment">//找到前一个</span></span><br><span class="line">		pDeletePreNode-&gt;pNext= pDeleteNode-&gt;pNext;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="17-2-多级指针"><a href="#17-2-多级指针" class="headerlink" title="17.2 多级指针"></a>17.2 多级指针</h3><p>给函数传参时是单向赋值</p>
<p>要改变传过去的变量的内容，要传该变量的指针</p>
<p>int**  指  指针的指针</p>
<p>**a     指  解引用2次</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeNum1</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">changeNum2</span><span class="params">(<span class="type">int</span>*)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>**)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">11</span>;</span><br><span class="line">	changeNum1(num);<span class="comment">//没有改动</span></span><br><span class="line">	changeNum2(&amp;num);<span class="comment">//有效改动</span></span><br><span class="line">	<span class="comment">//因此要修改传入指针时要传比他高一级的指针，访问则不用</span></span><br><span class="line">	<span class="type">int</span>* p;</span><br><span class="line">	change(&amp;p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeNum1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">	n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">changeNum2</span><span class="params">(<span class="type">int</span>* n)</span> &#123;</span><br><span class="line">	 (*n)++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>**a)</span> &#123;</span><br><span class="line">	(*a)++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言19</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8019/</url>
    <content><![CDATA[<h1 id="c语言19"><a href="#c语言19" class="headerlink" title="c语言19"></a>c语言19</h1><h2 id="19-1-预处理"><a href="#19-1-预处理" class="headerlink" title="19.1 预处理"></a>19.1 预处理</h2><p>.c 编成经过的步骤.exe<br>step1预处理<br>step2编译<br>step3链接</p>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><h4 id="头文件引入"><a href="#头文件引入" class="headerlink" title="头文件引入"></a>头文件引入</h4><p>#include<br>&lt;&gt;在系统目录下找 “”先在当前目录找再去系统目录找<br>#pragma once 防止头文件重复引入 </p>
<p>#ifndef HAHA   #ifdef 前者定义了执行，后者反之<br>#elif<br>#endif<br>上面三句运用等于#pragma once</p>
<p>例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> GRAPHICS_H <span class="comment">// 防止graphics.h被重复引用</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GRAPHICS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span> <span class="comment">// 引用标准库的头文件</span></span></span><br></pre></td></tr></table></figure>

<h4 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h4><p>#define pi 3.14 简单代码替换<br>宏只占编译时间，函数调用则占用运行时间<br>使用宏次数多时，宏展开后源程序很长<br>因为每展开一次都会使源程序增长<br>当有很多宏展开，目标文件很大<br>一般来说，用宏来代表简短的表达式比较合适<br>可以考虑使用宏，或者内联函数</p>
<p>例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> F int main() &#123; </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="19-2-文件操作"><a href="#19-2-文件操作" class="headerlink" title="19.2 文件操作"></a>19.2 文件操作</h2><p>文件内容本质是char </p>
<p>存储时 字符变为整数 表示时 整数变为字符<br>即字符文件和字节文件</p>
<h3 id="文件开关"><a href="#文件开关" class="headerlink" title="文件开关"></a>文件开关</h3><p>打开 关闭 改变光标位置 读 写(替代并不是插入)<br>file* 定义一个文件指针<br>fopen，fclose 开启关闭文件</p>
<h3 id="以字符操作文件"><a href="#以字符操作文件" class="headerlink" title="以字符操作文件"></a>以字符操作文件</h3><p>r 打开来读光标在第一个  w创建一个空文件（代替现有文件）来写 a打开一个存在文件光标在最后</p>
<p>写入：fprintf(fp, “%s\t”, “名字”);</p>
<p>读出：fscanf(fp, “%s\t”, name);</p>
<p>每次读写对应指针都会后移</p>
<h3 id="以字节操作文件"><a href="#以字节操作文件" class="headerlink" title="以字节操作文件"></a>以字节操作文件</h3><p>rb wb ab rb+ wb+ ab+</p>
<p>fread和fwrite参数均为：</p>
<p>指向要写入(读出)的数据的指针,一次写入(读出)项大小（以字节为单位）,要写入(读出)的项的最大数量（写(读)多少次）,指向文件的FILE指针</p>
<p>每次读写对应指针都会后移</p>
<h3 id="拓展操作"><a href="#拓展操作" class="headerlink" title="拓展操作"></a>拓展操作</h3><p>r+ w+ a+ (都拓展为读写)<br>r+是读写同指针 w+同r+但是可以生成文件 a+读写指针分开</p>
<h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p>创建文本文件 指定路径为桌面<br>往里面写入数据<br>关闭<br>打开<br>读到内存<br>输出<br>关闭</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//以字符操作文件</span></span><br><span class="line">	FILE* fp = fopen(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\数据.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == fp) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">	<span class="comment">//写入</span></span><br><span class="line">	<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\t&quot;</span>, <span class="string">&quot;名字&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\t&quot;</span>, <span class="number">666</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%.2lf\n&quot;</span>, <span class="number">6.666</span>);</span><br><span class="line">	<span class="comment">//关闭并保存</span></span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="comment">//打开</span></span><br><span class="line">	fp = fopen(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\数据.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="comment">//读取到内存</span></span><br><span class="line">	<span class="type">char</span> name[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">double</span> score;</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s\t&quot;</span>, name);</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d\t&quot;</span>, &amp;age);</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%lf\n&quot;</span>, &amp;score);</span><br><span class="line">	<span class="comment">//关闭</span></span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="comment">//内存显示到cmd</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\t&quot;</span>, name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, &amp;age);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,&amp;score);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//以字节操作文件</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">		<span class="type">char</span> name[<span class="number">255</span>];</span><br><span class="line">		<span class="type">int</span> age;</span><br><span class="line">		<span class="type">double</span> score;</span><br><span class="line">	&#125;;</span><br><span class="line">	FILE* fp = fopen(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\数据.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == fp) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">s1</span> =</span> &#123; <span class="number">0</span> &#125;,s2 = &#123; <span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s1.name);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s1.age);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;s1.score);</span><br><span class="line">	fwrite(&amp;s1, <span class="number">1</span>, <span class="keyword">sizeof</span> (s1), fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fp = fopen(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\数据.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	fread(&amp;s2, <span class="number">1</span>, <span class="keyword">sizeof</span>(s2), fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言18</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8018/</url>
    <content><![CDATA[<h1 id="c语言18"><a href="#c语言18" class="headerlink" title="c语言18"></a>c语言18</h1><h2 id="18-1-typedef"><a href="#18-1-typedef" class="headerlink" title="18.1 typedef"></a>18.1 typedef</h2><p>给类型取别名，主要作用在给函数类型，或者长名字的类型多重命名</p>
<p>用法：typedef 旧名 新名</p>
<p>两个名字均可用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> INT;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">	INT m = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;n:%d\n,m:%d\n&quot;</span>, n,m);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18-2-函数指针"><a href="#18-2-函数指针" class="headerlink" title="18.2 函数指针"></a>18.2 函数指针</h2><p>double func(int a,float*b);函数</p>
<p>double ()(int a,float*);函数类型</p>
<p>double (* ) (int a,float*);函数类型指针</p>
<p>double * p (int a,float*);定义一个函数类型的指针变量</p>
<p>注意函数名返回的是函数类型的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">func</span><span class="params">(<span class="type">int</span>* a, <span class="type">float</span>** f)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">float</span> f = <span class="number">66.66</span>;</span><br><span class="line">	<span class="type">float</span>* pf = &amp;f;  </span><br><span class="line">    <span class="comment">//先定义一个函数指针pFunc</span></span><br><span class="line">	<span class="type">void</span>* (*pFunc)(<span class="type">int</span>* a, <span class="type">float</span>** f);</span><br><span class="line">	pFunc = func;</span><br><span class="line">    <span class="type">void</span>* p = func(&amp;n, &amp;pf);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p:%g\n&quot;</span>, *(<span class="type">float</span>*)p);</span><br><span class="line">    <span class="type">void</span>* p = pFunc(&amp;n, &amp;pf);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p:%g\n&quot;</span>, *(<span class="type">float</span>*)p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">func</span><span class="params">(<span class="type">int</span>* a, <span class="type">float</span>** f)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;func被调用*a:%d,**f:%g\n&quot;</span>, *a, **f);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span>*)(*f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="18-3-函数指针应用"><a href="#18-3-函数指针应用" class="headerlink" title="18.3 函数指针应用"></a>18.3 函数指针应用</h2><h3 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a - b; &#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>,m = <span class="number">2</span>;</span><br><span class="line">	<span class="type">int</span> *<span class="title function_">p</span> <span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line">	<span class="comment">//使用</span></span><br><span class="line">    p=add;</span><br><span class="line">	p(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//1+2</span></span><br><span class="line">    p=sub;</span><br><span class="line">    p(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//1-2</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用typedef升级版"><a href="#利用typedef升级版" class="headerlink" title="利用typedef升级版"></a>利用typedef升级版</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a - b; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给int（*）（int，int）取别名为PFUNC</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(*PFUNC)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">call</span><span class="params">(PFUNC p, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;p(a, b);&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>,m = <span class="number">2</span>;</span><br><span class="line">	call(add, n, m);<span class="comment">//1+2</span></span><br><span class="line">	call(sub, n, m);<span class="comment">//1-2</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言20</title>
    <url>/2022/03/12/c%E8%AF%AD%E8%A8%8020/</url>
    <content><![CDATA[<h1 id="c语言20"><a href="#c语言20" class="headerlink" title="c语言20"></a>c语言20</h1><h2 id="20-1-文件操作"><a href="#20-1-文件操作" class="headerlink" title="20.1 文件操作"></a>20.1 文件操作</h2><h3 id="20-1-1-文件内容指针"><a href="#20-1-1-文件内容指针" class="headerlink" title="20.1.1 文件内容指针"></a>20.1.1 文件内容指针</h3><p>文件指针          FILE*<br>文件内容指针      理解为光标</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	FILE* fp = fopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span>==fp) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开成功\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;打开成功\n&quot;</span>);</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	fread(&amp;c, <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>), fp);</span><br><span class="line">	fread(&amp;c, <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>), fp);<span class="comment">//读的时候光标会向后</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		r = fread(&amp;c, <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>), fp);<span class="comment">//r返回一共读到的字节量</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">1</span> != r)<span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">		fseek(fp, <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">		<span class="comment">//offset偏移量，正后负前</span></span><br><span class="line">		<span class="comment">//seek_cur 当前位置</span></span><br><span class="line">		<span class="comment">//seek_set 开头位置</span></span><br><span class="line">		<span class="comment">//seek_end 结尾位置		</span></span><br><span class="line">		<span class="comment">//if (0 == count % 2)printf(&quot;%c&quot;, c);</span></span><br><span class="line">		<span class="comment">//count++;//只输出偶数位</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-1-2-文件拷贝"><a href="#20-1-2-文件拷贝" class="headerlink" title="20.1.2 文件拷贝"></a>20.1.2 文件拷贝</h3><p>图片，声音文件都能拷贝</p>
<p>原理为逐字节复制到另一文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//1、用户输入src dst文件路径</span></span><br><span class="line">	<span class="type">char</span> srcFileName[<span class="number">260</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> dstFileName[<span class="number">260</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">//路径长度最大只能260</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, srcFileName);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, dstFileName);</span><br><span class="line">	<span class="comment">//2、打开src文件   创建dst文件</span></span><br><span class="line">	FILE* fpSrc = fopen(srcFileName, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	FILE* fpDst = fopen(dstFileName, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == fpSrc|| <span class="literal">NULL</span> == fpDst) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开成功\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;打开成功\n&quot;</span>);</span><br><span class="line">	<span class="comment">//3、循环读取src到内存写入dst读完结束</span></span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="type">char</span> buf[<span class="number">1024</span>];<span class="comment">//看读多少建立缓冲区（buffer）</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		r = fread(buf, <span class="number">1</span>, <span class="number">1024</span>, fpSrc);</span><br><span class="line">		<span class="keyword">if</span> (r) &#123;</span><br><span class="line">			fwrite(buf, <span class="number">1</span>, r, fpDst);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3、关闭</span></span><br><span class="line">	fclose(fpSrc); fclose(fpDst);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-1-3-文件加密"><a href="#20-1-3-文件加密" class="headerlink" title="20.1.3 文件加密"></a>20.1.3 文件加密</h3><p>在文件拷贝的过程中，改变文件内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">	<span class="comment">//打开文件</span></span><br><span class="line">	FILE* fpSrc = fopen(argv[<span class="number">1</span>], <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">	FILE* fpDst = fopen(<span class="string">&quot;a.jiami&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		r = fread(c, <span class="number">1</span>, <span class="number">1</span>, fpSrc);</span><br><span class="line">		<span class="keyword">if</span> (r) &#123;</span><br><span class="line">			c ^= <span class="number">0x56</span>; <span class="comment">//记得换成多字符集，这里是异或加密</span></span><br><span class="line">			fwrite(c, <span class="number">1</span>, <span class="number">1</span>, fpDst);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//3、关闭</span></span><br><span class="line">	fclose(fpSrc); fclose(fpDst);</span><br><span class="line">	<span class="comment">//4、把argv[1]删掉并给打包文件改为原来的名字</span></span><br><span class="line">	DeleteFile(argv[<span class="number">1</span>]);</span><br><span class="line">	MoveFile(<span class="string">&quot;a.jiami&quot;</span>, argv[<span class="number">1</span>]);<span class="comment">//记得换成多字符集</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="20-1-4-文件解密"><a href="#20-1-4-文件解密" class="headerlink" title="20.1.4 文件解密"></a>20.1.4 文件解密</h3><p>和加密同理<br>其他加密和解密方式请查看密码学资料</p>
<h3 id="20-1-5-文件打包"><a href="#20-1-5-文件打包" class="headerlink" title="20.1.5 文件打包"></a>20.1.5 文件打包</h3><p>多个文件合并成一个，合成后的文件要有标识</p>
<p>标识组成：文件个数，文件个数个结构体的文件名和文件大</p>
<p>标识后面是依次文件数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FileInfo</span>&#123;</span></span><br><span class="line">	<span class="type">char</span> fileName[<span class="number">256</span>];</span><br><span class="line">	<span class="type">int</span> fileSize;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">	<span class="comment">//1、创建并打开打包后文件</span></span><br><span class="line">	FILE* fpPag=fopen(<span class="string">&quot;a.pag&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="comment">//2、命令行参数得到打包文件信息(用户输入也行)</span></span><br><span class="line">	<span class="type">int</span> fileNum = argc - <span class="number">1</span>;<span class="comment">//-1是因为去除mian本身的运行路径，详情看c语言8</span></span><br><span class="line">	fwrite(&amp;fileNum, <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>), fpPag);</span><br><span class="line">    <span class="comment">//3、创建第二段标识的内存空间并清空置零</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">FileInfo</span>* <span class="title">pFI</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> FileInfo));</span><br><span class="line">	menset(pFI, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> FileInfo));</span><br><span class="line">    <span class="comment">//4、填充数据</span></span><br><span class="line">	<span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">FileInfo</span>* <span class="title">fTemp</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileNum; i++) &#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(&amp;(pFI[i].fileName), argv[i + <span class="number">1</span>]);<span class="comment">//复制文件名</span></span><br><span class="line">		fTemp = fopen(&amp;(argv[i + <span class="number">1</span>]), <span class="string">&quot;rb&quot;</span>);<span class="comment">//打开文件</span></span><br><span class="line">		fseek(fTemp, <span class="number">0</span>, SEEK_END);<span class="comment">//指针移到结尾</span></span><br><span class="line">		size=ftell(fTemp);<span class="comment">//获取文件指针到文件头的字节量</span></span><br><span class="line">		pFI[i].fileSize = size;<span class="comment">//复制文件大小</span></span><br><span class="line">		<span class="comment">//将内存空间写入打包文件</span></span><br><span class="line">		fwrite(&amp;(pFI[i]), <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> FileInfo), fpPag);</span><br><span class="line">		fclose(&amp;(argv[i + <span class="number">1</span>]));</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//5、循环依序读取文件并写入打包文件</span></span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	<span class="type">char</span> buf[<span class="number">666</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileNum; i++) &#123;</span><br><span class="line">		fTemp = fopen(pFI[i].fileName, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">			r = fread(&amp;buf, <span class="number">1</span>, <span class="number">1</span>, fTemp);</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">1</span> == r) &#123;</span><br><span class="line">				fwrite(&amp;buf, <span class="number">1</span>, <span class="number">1</span>, fpPag);</span><br><span class="line">				fclose(pFI[i].fileName);</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//5、关闭</span></span><br><span class="line">	fclose(<span class="string">&quot;a.pag&quot;</span>); </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言21</title>
    <url>/2022/03/12/c%E8%AF%AD%E8%A8%8021/</url>
    <content><![CDATA[<h1 id="c语言21"><a href="#c语言21" class="headerlink" title="c语言21"></a>c语言21</h1><h2 id="21-1-其他类型"><a href="#21-1-其他类型" class="headerlink" title="21.1 其他类型"></a>21.1 其他类型</h2><h3 id="21-1-1-联合"><a href="#21-1-1-联合" class="headerlink" title="21.1.1 联合"></a>21.1.1 联合</h3><p>union</p>
<p>多个成员共用一块内存</p>
<p>该内存大小&#x3D;内存最大的成员的内存大小</p>
<h3 id="21-1-2-枚举"><a href="#21-1-2-枚举" class="headerlink" title="21.1.2 枚举"></a>21.1.2 枚举</h3><p>enum</p>
<p>枚举成员必定是int型所以没有内存名</p>
<p>首位默认为0</p>
<p>内部成员会依次递增</p>
<h3 id="21-1-3-const限定"><a href="#21-1-3-const限定" class="headerlink" title="21.1.3 const限定"></a>21.1.3 const限定</h3><p>const修饰为只读变量</p>
<h4 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针"></a>常量指针</h4><p>不可以改变的量(常量)的指针</p>
<h4 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h4><p>指针不可以修改</p>
<h3 id="21-1-4-综上实例"><a href="#21-1-4-综上实例" class="headerlink" title="21.1.4 综上实例"></a>21.1.4 综上实例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Stu</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Week</span> &#123;</span></span><br><span class="line">	星期一,星期二,星期三,星期四=<span class="number">4</span>,星期五,星期六,星期日</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">union</span> <span class="title">Stu</span> <span class="title">u</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">Week</span> <span class="title">w</span> ;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, 星期二);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* p = &amp;a;</span><br><span class="line">	*p = <span class="number">666</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> m;</span><br><span class="line">	</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *b = &amp;m;<span class="comment">//常量指针</span></span><br><span class="line">    <span class="comment">//同int const* b;  </span></span><br><span class="line">	m = <span class="number">66</span>;</span><br><span class="line">	<span class="comment">//限制了*b的修改</span></span><br><span class="line">	</span><br><span class="line">    <span class="type">int</span>* <span class="type">const</span> c=&amp;m;<span class="comment">//指针常量</span></span><br><span class="line">	<span class="comment">//限制了c指针的修改</span></span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p;<span class="comment">//解引用和指针都不能修改</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言22</title>
    <url>/2022/03/12/c%E8%AF%AD%E8%A8%8022/</url>
    <content><![CDATA[<h1 id="c语言22"><a href="#c语言22" class="headerlink" title="c语言22"></a>c语言22</h1><h2 id="22-1-easyX图形库"><a href="#22-1-easyX图形库" class="headerlink" title="22.1 easyX图形库"></a>22.1 easyX图形库</h2><h3 id="不规则贴图原理"><a href="#不规则贴图原理" class="headerlink" title="不规则贴图原理"></a>不规则贴图原理</h3><p>全部图形都是矩形，对于不规则图形，需要以下方式</p>
<p>彩色&amp;黑&#x3D;黑 </p>
<p>彩色&amp;白&#x3D;彩色 </p>
<p>彩色|黑&#x3D;彩色 </p>
<p>彩色|白&#x3D;白</p>
<h3 id="include-lt-graphics-h-gt"><a href="#include-lt-graphics-h-gt" class="headerlink" title="#include&lt;graphics.h&gt;"></a>#include&lt;graphics.h&gt;</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******************************************************</span></span><br><span class="line"><span class="comment"> * EasyX Library for C++ (Ver:20210730)</span></span><br><span class="line"><span class="comment"> * https://easyx.cn</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * EasyX.h</span></span><br><span class="line"><span class="comment"> *		Provides the latest API.</span></span><br><span class="line"><span class="comment"> ******************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WINVER</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WINVER 0x0400			<span class="comment">// Specifies that the minimum required platform is Windows 95 and Windows NT 4.0.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _WIN32_WINNT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WIN32_WINNT 0x0500		<span class="comment">// Specifies that the minimum required platform is Windows 2000.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _WIN32_WINDOWS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WIN32_WINDOWS 0x0410	<span class="comment">// Specifies that the minimum required platform is Windows 98.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UNICODE</span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;EasyXw.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;EasyXa.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> EasyX is only for C++</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// EasyX Window Properties</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EW_SHOWCONSOLE		1		<span class="comment">// Show console window</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EW_NOCLOSE			2		<span class="comment">// Disable the close button</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EW_NOMINIMIZE		4		<span class="comment">// Disable the minimize button</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EW_DBLCLKS			8		<span class="comment">// Support double-click events</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	BLACK			0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	BLUE			0xAA0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	GREEN			0x00AA00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	CYAN			0xAAAA00</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	RED				0x0000AA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	MAGENTA			0xAA00AA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	BROWN			0x0055AA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	LIGHTGRAY		0xAAAAAA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	DARKGRAY		0x555555</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	LIGHTBLUE		0xFF5555</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	LIGHTGREEN		0x55FF55</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	LIGHTCYAN		0xFFFF55</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	LIGHTRED		0x5555FF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	LIGHTMAGENTA	0xFF55FF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	YELLOW			0x55FFFF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>	WHITE			0xFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义颜色转换宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BGR(color)	( (((color) &amp; 0xFF) <span class="string">&lt;&lt; 16) | ((color) &amp; 0xFF00FF00) | (((color) &amp; 0xFF0000) &gt;</span>&gt; 16) )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IMAGE</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义线的样式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LINESTYLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	LINESTYLE();</span><br><span class="line">	LINESTYLE(<span class="type">const</span> LINESTYLE &amp;style);</span><br><span class="line">	LINESTYLE&amp; operator = (<span class="type">const</span> LINESTYLE &amp;style);			<span class="comment">// 赋值运算符重载函数</span></span><br><span class="line">	virtual ~LINESTYLE();</span><br><span class="line"></span><br><span class="line">	DWORD	style;</span><br><span class="line">	DWORD	thickness;</span><br><span class="line">	DWORD	*puserstyle;</span><br><span class="line">	DWORD	userstylecount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILLSTYLE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	FILLSTYLE();</span><br><span class="line">	FILLSTYLE(<span class="type">const</span> FILLSTYLE &amp;style);</span><br><span class="line">	FILLSTYLE&amp; operator = (<span class="type">const</span> FILLSTYLE &amp;style);			<span class="comment">// 赋值运算符重载函数</span></span><br><span class="line">	virtual ~FILLSTYLE();</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>			style;			<span class="comment">// 填充形式</span></span><br><span class="line">	<span class="type">long</span>		hatch;			<span class="comment">// 填充图案样式</span></span><br><span class="line">	IMAGE*		ppattern;		<span class="comment">// 填充图像</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义图像对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IMAGE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	<span class="type">int</span> <span class="title function_">getwidth</span><span class="params">()</span> <span class="type">const</span>;	<span class="comment">// 获取对象的宽度</span></span><br><span class="line">	<span class="type">int</span> <span class="title function_">getheight</span><span class="params">()</span> <span class="type">const</span>;	<span class="comment">// 获取对象的高度</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">	<span class="type">int</span> width, height;		<span class="comment">// 对象的宽高</span></span><br><span class="line">	HBITMAP m_hBmp;</span><br><span class="line">	HDC m_hMemDC;</span><br><span class="line">	<span class="type">float</span> m_data[<span class="number">6</span>];</span><br><span class="line">	COLORREF	m_LineColor;		<span class="comment">// 当前线条颜色</span></span><br><span class="line">	COLORREF	m_FillColor;		<span class="comment">// 当前填充颜色</span></span><br><span class="line">	COLORREF	m_TextColor;		<span class="comment">// 当前文字颜色</span></span><br><span class="line">	COLORREF	m_BkColor;			<span class="comment">// 当前背景颜色</span></span><br><span class="line">	DWORD*		m_pBuffer;			<span class="comment">// 绘图区的内存</span></span><br><span class="line"></span><br><span class="line">	LINESTYLE	m_LineStyle;		<span class="comment">// 画线样式</span></span><br><span class="line">	FILLSTYLE	m_FillStyle;		<span class="comment">// 填充样式</span></span><br><span class="line"></span><br><span class="line">	virtual <span class="type">void</span> <span class="title function_">SetDefault</span><span class="params">()</span>;						<span class="comment">// 设置为默认状态</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">	IMAGE(<span class="type">int</span> _width = <span class="number">0</span>, <span class="type">int</span> _height = <span class="number">0</span>);			<span class="comment">// 创建图像</span></span><br><span class="line">	IMAGE(<span class="type">const</span> IMAGE &amp;img);						<span class="comment">// 拷贝构造函数</span></span><br><span class="line">	IMAGE&amp; operator = (<span class="type">const</span> IMAGE &amp;img);			<span class="comment">// 赋值运算符重载函数</span></span><br><span class="line">	virtual ~IMAGE();</span><br><span class="line">	virtual <span class="type">void</span> <span class="title function_">Resize</span><span class="params">(<span class="type">int</span> _width, <span class="type">int</span> _height)</span>;	<span class="comment">// 调整尺寸</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图模式相关函数</span></span><br><span class="line"></span><br><span class="line">HWND <span class="title function_">initgraph</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> height, <span class="type">int</span> flag = <span class="literal">NULL</span>)</span>;	<span class="comment">// 初始化图形环境</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">closegraph</span><span class="params">()</span>;										<span class="comment">// 关闭图形环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图环境设置</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cleardevice</span><span class="params">()</span>;					<span class="comment">// 清屏</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setcliprgn</span><span class="params">(HRGN hrgn)</span>;			<span class="comment">// 设置当前绘图设备的裁剪区</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearcliprgn</span><span class="params">()</span>;				<span class="comment">// 清除裁剪区的屏幕内容</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getlinestyle</span><span class="params">(LINESTYLE* pstyle)</span>;						<span class="comment">// 获取当前画线样式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setlinestyle</span><span class="params">(<span class="type">const</span> LINESTYLE* pstyle)</span>;					<span class="comment">// 设置当前画线样式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setlinestyle</span><span class="params">(<span class="type">int</span> style, <span class="type">int</span> thickness = <span class="number">1</span>, <span class="type">const</span> DWORD *puserstyle = <span class="literal">NULL</span>, DWORD userstylecount = <span class="number">0</span>)</span>;	<span class="comment">// 设置当前画线样式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getfillstyle</span><span class="params">(FILLSTYLE* pstyle)</span>;						<span class="comment">// 获取当前填充样式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setfillstyle</span><span class="params">(<span class="type">const</span> FILLSTYLE* pstyle)</span>;					<span class="comment">// 设置当前填充样式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setfillstyle</span><span class="params">(<span class="type">int</span> style, <span class="type">long</span> hatch = <span class="literal">NULL</span>, IMAGE* ppattern = <span class="literal">NULL</span>)</span>;		<span class="comment">// 设置当前填充样式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setfillstyle</span><span class="params">(BYTE* ppattern8x8)</span>;						<span class="comment">// 设置当前填充样式</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setorigin</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;							<span class="comment">// 设置坐标原点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getaspectratio</span><span class="params">(<span class="type">float</span> *pxasp, <span class="type">float</span> *pyasp)</span>;		<span class="comment">// 获取当前缩放因子</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setaspectratio</span><span class="params">(<span class="type">float</span> xasp, <span class="type">float</span> yasp)</span>;			<span class="comment">// 设置当前缩放因子</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">getrop2</span><span class="params">()</span>;						<span class="comment">// 获取前景的二元光栅操作模式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setrop2</span><span class="params">(<span class="type">int</span> mode)</span>;				<span class="comment">// 设置前景的二元光栅操作模式</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">getpolyfillmode</span><span class="params">()</span>;				<span class="comment">// 获取多边形填充模式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setpolyfillmode</span><span class="params">(<span class="type">int</span> mode)</span>;		<span class="comment">// 设置多边形填充模式</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">graphdefaults</span><span class="params">()</span>;				<span class="comment">// 重置所有绘图设置为默认值</span></span><br><span class="line"></span><br><span class="line">COLORREF <span class="title function_">getlinecolor</span><span class="params">()</span>;			<span class="comment">// 获取当前线条颜色</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setlinecolor</span><span class="params">(COLORREF color)</span>;	<span class="comment">// 设置当前线条颜色</span></span><br><span class="line">COLORREF <span class="title function_">gettextcolor</span><span class="params">()</span>;			<span class="comment">// 获取当前文字颜色</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">settextcolor</span><span class="params">(COLORREF color)</span>;	<span class="comment">// 设置当前文字颜色</span></span><br><span class="line">COLORREF <span class="title function_">getfillcolor</span><span class="params">()</span>;			<span class="comment">// 获取当前填充颜色</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setfillcolor</span><span class="params">(COLORREF color)</span>;	<span class="comment">// 设置当前填充颜色</span></span><br><span class="line">COLORREF <span class="title function_">getbkcolor</span><span class="params">()</span>;				<span class="comment">// 获取当前绘图背景色</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setbkcolor</span><span class="params">(COLORREF color)</span>;	<span class="comment">// 设置当前绘图背景色</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">getbkmode</span><span class="params">()</span>;					<span class="comment">// 获取背景混合模式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setbkmode</span><span class="params">(<span class="type">int</span> mode)</span>;			<span class="comment">// 设置背景混合模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色模型转换函数</span></span><br><span class="line">COLORREF <span class="title function_">RGBtoGRAY</span><span class="params">(COLORREF rgb)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">RGBtoHSL</span><span class="params">(COLORREF rgb, <span class="type">float</span> *H, <span class="type">float</span> *S, <span class="type">float</span> *L)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">RGBtoHSV</span><span class="params">(COLORREF rgb, <span class="type">float</span> *H, <span class="type">float</span> *S, <span class="type">float</span> *V)</span>;</span><br><span class="line">COLORREF <span class="title function_">HSLtoRGB</span><span class="params">(<span class="type">float</span> H, <span class="type">float</span> S, <span class="type">float</span> L)</span>;</span><br><span class="line">COLORREF <span class="title function_">HSVtoRGB</span><span class="params">(<span class="type">float</span> H, <span class="type">float</span> S, <span class="type">float</span> V)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘图函数</span></span><br><span class="line"></span><br><span class="line">COLORREF <span class="title function_">getpixel</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;				<span class="comment">// 获取点的颜色</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">putpixel</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, COLORREF color)</span>;	<span class="comment">// 画点</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">line</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span>;		<span class="comment">// 画线</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rectangle</span>	   <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 画矩形</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fillrectangle</span> <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 画填充矩形(有边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">solidrectangle</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 画填充矩形(无边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearrectangle</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 清空矩形区域</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">circle</span>		<span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius)</span>;		<span class="comment">// 画圆</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fillcircle</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius)</span>;		<span class="comment">// 画填充圆(有边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">solidcircle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius)</span>;		<span class="comment">// 画填充圆(无边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearcircle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> radius)</span>;		<span class="comment">// 清空圆形区域</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ellipse</span>	 <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 画椭圆</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fillellipse</span> <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 画填充椭圆(有边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">solidellipse</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 画填充椭圆(无边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearellipse</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 清空椭圆形区域</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">roundrect</span>	   <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">int</span> ellipsewidth, <span class="type">int</span> ellipseheight)</span>;		<span class="comment">// 画圆角矩形</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fillroundrect</span> <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">int</span> ellipsewidth, <span class="type">int</span> ellipseheight)</span>;		<span class="comment">// 画填充圆角矩形(有边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">solidroundrect</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">int</span> ellipsewidth, <span class="type">int</span> ellipseheight)</span>;		<span class="comment">// 画填充圆角矩形(无边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearroundrect</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">int</span> ellipsewidth, <span class="type">int</span> ellipseheight)</span>;		<span class="comment">// 清空圆角矩形区域</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arc</span>	 <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">double</span> stangle, <span class="type">double</span> endangle)</span>;	<span class="comment">// 画椭圆弧(起始角度和终止角度为弧度制)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pie</span>	 <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">double</span> stangle, <span class="type">double</span> endangle)</span>;	<span class="comment">// 画椭圆扇形(起始角度和终止角度为弧度制)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fillpie</span> <span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">double</span> stangle, <span class="type">double</span> endangle)</span>;	<span class="comment">// 画填充椭圆扇形(有边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">solidpie</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">double</span> stangle, <span class="type">double</span> endangle)</span>;	<span class="comment">// 画填充椭圆扇形(无边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearpie</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom, <span class="type">double</span> stangle, <span class="type">double</span> endangle)</span>;	<span class="comment">// 清空椭圆扇形区域</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">polyline</span>	 <span class="params">(<span class="type">const</span> POINT *points, <span class="type">int</span> num)</span>;								<span class="comment">// 画多条连续的线</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">polygon</span>	 <span class="params">(<span class="type">const</span> POINT *points, <span class="type">int</span> num)</span>;								<span class="comment">// 画多边形</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fillpolygon</span> <span class="params">(<span class="type">const</span> POINT *points, <span class="type">int</span> num)</span>;								<span class="comment">// 画填充的多边形(有边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">solidpolygon</span><span class="params">(<span class="type">const</span> POINT *points, <span class="type">int</span> num)</span>;								<span class="comment">// 画填充的多边形(无边框)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearpolygon</span><span class="params">(<span class="type">const</span> POINT *points, <span class="type">int</span> num)</span>;								<span class="comment">// 清空多边形区域</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">polybezier</span><span class="params">(<span class="type">const</span> POINT *points, <span class="type">int</span> num)</span>;									<span class="comment">// 画贝塞尔曲线</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">floodfill</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, COLORREF color, <span class="type">int</span> filltype = FLOODFILLBORDER)</span>;	<span class="comment">// 填充区域</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文字相关函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">outtextxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, LPCTSTR str)</span>;	<span class="comment">// 在指定位置输出字符串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">outtextxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, TCHAR c)</span>;		<span class="comment">// 在指定位置输出字符</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">textwidth</span><span class="params">(LPCTSTR str)</span>;					<span class="comment">// 获取字符串占用的像素宽</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">textwidth</span><span class="params">(TCHAR c)</span>;						<span class="comment">// 获取字符占用的像素宽</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">textheight</span><span class="params">(LPCTSTR str)</span>;				<span class="comment">// 获取字符串占用的像素高</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">textheight</span><span class="params">(TCHAR c)</span>;					<span class="comment">// 获取字符占用的像素高</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drawtext</span><span class="params">(LPCTSTR str, RECT* pRect, UINT uFormat)</span>;	<span class="comment">// 在指定区域内以指定格式输出字符串</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drawtext</span><span class="params">(TCHAR c, RECT* pRect, UINT uFormat)</span>;		<span class="comment">// 在指定区域内以指定格式输出字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前字体样式(详见帮助)</span></span><br><span class="line"><span class="comment">//		nHeight: 字符的平均高度；</span></span><br><span class="line"><span class="comment">//		nWidth: 字符的平均宽度(0 表示自适应)；</span></span><br><span class="line"><span class="comment">//		lpszFace: 字体名称；</span></span><br><span class="line"><span class="comment">//		nEscapement: 字符串的书写角度(单位 0.1 度)；</span></span><br><span class="line"><span class="comment">//		nOrientation: 每个字符的书写角度(单位 0.1 度)；</span></span><br><span class="line"><span class="comment">//		nWeight: 字符的笔画粗细(0 表示默认粗细)；</span></span><br><span class="line"><span class="comment">//		bItalic: 是否斜体；</span></span><br><span class="line"><span class="comment">//		bUnderline: 是否下划线；</span></span><br><span class="line"><span class="comment">//		bStrikeOut: 是否删除线；</span></span><br><span class="line"><span class="comment">//		fbCharSet: 指定字符集；</span></span><br><span class="line"><span class="comment">//		fbOutPrecision: 指定文字的输出精度；</span></span><br><span class="line"><span class="comment">//		fbClipPrecision: 指定文字的剪辑精度；</span></span><br><span class="line"><span class="comment">//		fbQuality: 指定文字的输出质量；</span></span><br><span class="line"><span class="comment">//		fbPitchAndFamily: 指定以常规方式描述字体的字体系列。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">settextstyle</span><span class="params">(<span class="type">int</span> nHeight, <span class="type">int</span> nWidth, LPCTSTR lpszFace)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">settextstyle</span><span class="params">(<span class="type">int</span> nHeight, <span class="type">int</span> nWidth, LPCTSTR lpszFace, <span class="type">int</span> nEscapement, <span class="type">int</span> nOrientation, <span class="type">int</span> nWeight, <span class="type">bool</span> bItalic, <span class="type">bool</span> bUnderline, <span class="type">bool</span> bStrikeOut)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">settextstyle</span><span class="params">(<span class="type">int</span> nHeight, <span class="type">int</span> nWidth, LPCTSTR lpszFace, <span class="type">int</span> nEscapement, <span class="type">int</span> nOrientation, <span class="type">int</span> nWeight, <span class="type">bool</span> bItalic, <span class="type">bool</span> bUnderline, <span class="type">bool</span> bStrikeOut, BYTE fbCharSet, BYTE fbOutPrecision, BYTE fbClipPrecision, BYTE fbQuality, BYTE fbPitchAndFamily)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">settextstyle</span><span class="params">(<span class="type">const</span> LOGFONT *font)</span>;	<span class="comment">// 设置当前字体样式</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">gettextstyle</span><span class="params">(LOGFONT *font)</span>;		<span class="comment">// 获取当前字体样式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 图像处理函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">loadimage</span><span class="params">(IMAGE *pDstImg, LPCTSTR pImgFile, <span class="type">int</span> nWidth = <span class="number">0</span>, <span class="type">int</span> nHeight = <span class="number">0</span>, <span class="type">bool</span> bResize = <span class="literal">false</span>)</span>;					<span class="comment">// 从图片文件获取图像(bmp/gif/jpg/png/tif/emf/wmf/ico)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">loadimage</span><span class="params">(IMAGE *pDstImg, LPCTSTR pResType, LPCTSTR pResName, <span class="type">int</span> nWidth = <span class="number">0</span>, <span class="type">int</span> nHeight = <span class="number">0</span>, <span class="type">bool</span> bResize = <span class="literal">false</span>)</span>;	<span class="comment">// 从资源文件获取图像(bmp/gif/jpg/png/tif/emf/wmf/ico)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">saveimage</span><span class="params">(LPCTSTR pImgFile, IMAGE* pImg = <span class="literal">NULL</span>)</span>;																		<span class="comment">// 保存图像(bmp/gif/jpg/png/tif)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getimage</span><span class="params">(IMAGE *pDstImg, <span class="type">int</span> srcX, <span class="type">int</span> srcY, <span class="type">int</span> srcWidth, <span class="type">int</span> srcHeight)</span>;												<span class="comment">// 从当前绘图设备获取图像</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">putimage</span><span class="params">(<span class="type">int</span> dstX, <span class="type">int</span> dstY, <span class="type">const</span> IMAGE *pSrcImg, DWORD dwRop = SRCCOPY)</span>;												<span class="comment">// 绘制图像到屏幕</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">putimage</span><span class="params">(<span class="type">int</span> dstX, <span class="type">int</span> dstY, <span class="type">int</span> dstWidth, <span class="type">int</span> dstHeight, <span class="type">const</span> IMAGE *pSrcImg, <span class="type">int</span> srcX, <span class="type">int</span> srcY, DWORD dwRop = SRCCOPY)</span>;		<span class="comment">// 绘制图像到屏幕(指定宽高)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">rotateimage</span><span class="params">(IMAGE *dstimg, IMAGE *srcimg, <span class="type">double</span> radian, COLORREF bkcolor = BLACK, <span class="type">bool</span> autosize = <span class="literal">false</span>, <span class="type">bool</span> highquality = <span class="literal">true</span>)</span>;<span class="comment">// 旋转图像</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Resize</span><span class="params">(IMAGE* pImg, <span class="type">int</span> width, <span class="type">int</span> height)</span>;	<span class="comment">// 调整绘图设备的大小</span></span><br><span class="line">DWORD* <span class="title function_">GetImageBuffer</span><span class="params">(IMAGE* pImg = <span class="literal">NULL</span>)</span>;			<span class="comment">// 获取绘图设备的显存指针</span></span><br><span class="line">IMAGE* <span class="title function_">GetWorkingImage</span><span class="params">()</span>;							<span class="comment">// 获取当前绘图设备</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetWorkingImage</span><span class="params">(IMAGE* pImg = <span class="literal">NULL</span>)</span>;			<span class="comment">// 设置当前绘图设备</span></span><br><span class="line">HDC <span class="title function_">GetImageHDC</span><span class="params">(IMAGE* pImg = <span class="literal">NULL</span>)</span>;				<span class="comment">// 获取绘图设备句柄(HDC)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>	<span class="title function_">getwidth</span><span class="params">()</span>;			<span class="comment">// 获取绘图区宽度</span></span><br><span class="line"><span class="type">int</span>	<span class="title function_">getheight</span><span class="params">()</span>;		<span class="comment">// 获取绘图区高度</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">BeginBatchDraw</span><span class="params">()</span>;	<span class="comment">// 开始批量绘制</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FlushBatchDraw</span><span class="params">()</span>;	<span class="comment">// 执行未完成的绘制任务</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FlushBatchDraw</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 执行指定区域内未完成的绘制任务</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EndBatchDraw</span><span class="params">()</span>;	<span class="comment">// 结束批量绘制，并执行未完成的绘制任务</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EndBatchDraw</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span>;	<span class="comment">// 结束批量绘制，并执行指定区域内未完成的绘制任务</span></span><br><span class="line"></span><br><span class="line">HWND <span class="title function_">GetHWnd</span><span class="params">()</span>;								<span class="comment">// 获取绘图窗口句柄(HWND)</span></span><br><span class="line">TCHAR* <span class="title function_">GetEasyXVer</span><span class="params">()</span>;						<span class="comment">// 获取 EasyX 当前版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户输入</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InputBox</span><span class="params">(LPTSTR pString, <span class="type">int</span> nMaxCount, LPCTSTR pPrompt = <span class="literal">NULL</span>, LPCTSTR pTitle = <span class="literal">NULL</span>, LPCTSTR pDefault = <span class="literal">NULL</span>, <span class="type">int</span> width = <span class="number">0</span>, <span class="type">int</span> height = <span class="number">0</span>, <span class="type">bool</span> bOnlyOK = <span class="literal">true</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Message</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	Category	Type				Description</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	EM_MOUSE	WM_MOUSEMOVE		The mouse moves.</span></span><br><span class="line"><span class="comment">//				WM_MOUSEWHEEL		The mouse wheel is rotated.</span></span><br><span class="line"><span class="comment">//				WM_LBUTTONDOWN		The left mouse button is pressed.</span></span><br><span class="line"><span class="comment">//				WM_LBUTTONUP		The left mouse button is released.</span></span><br><span class="line"><span class="comment">//				WM_LBUTTONDBLCLK	The left mouse button is double-clicked.</span></span><br><span class="line"><span class="comment">//				WM_MBUTTONDOWN		The middle mouse button is pressed.</span></span><br><span class="line"><span class="comment">//				WM_MBUTTONUP		The middle mouse button is released.</span></span><br><span class="line"><span class="comment">//				WM_MBUTTONDBLCLK	The middle mouse button is double-clicked.</span></span><br><span class="line"><span class="comment">//				WM_RBUTTONDOWN		The right mouse button is pressed.</span></span><br><span class="line"><span class="comment">//				WM_RBUTTONUP		The right mouse button is released.</span></span><br><span class="line"><span class="comment">//				WM_RBUTTONDBLCLK	The right mouse button is double-clicked.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	EM_KEY		WM_KEYDOWN			A key is pressed.</span></span><br><span class="line"><span class="comment">//				WM_KEYUP			A key is released.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	EM_CHAR		WM_CHAR</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//	EM_WINDOW	WM_ACTIVATE			The window is activated or deactivated.</span></span><br><span class="line"><span class="comment">//				WM_MOVE				The window has been moved.</span></span><br><span class="line"><span class="comment">//				WM_SIZE				The size of window has changed.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Message Category</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_MOUSE	1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_KEY		2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_CHAR		4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EM_WINDOW	8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Message Structure</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ExMessage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	USHORT message;					<span class="comment">// The message identifier.</span></span><br><span class="line">	<span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">		<span class="comment">// Data of the mouse message</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">		&#123;</span></span><br><span class="line">			<span class="type">bool</span> ctrl		:<span class="number">1</span>;		<span class="comment">// Indicates whether the CTRL key is pressed.</span></span><br><span class="line">			<span class="type">bool</span> shift		:<span class="number">1</span>;		<span class="comment">// Indicates whether the SHIFT key is pressed.</span></span><br><span class="line">			<span class="type">bool</span> lbutton	:<span class="number">1</span>;		<span class="comment">// Indicates whether the left mouse button is pressed.</span></span><br><span class="line">			<span class="type">bool</span> mbutton	:<span class="number">1</span>;		<span class="comment">// Indicates whether the middle mouse button is pressed.</span></span><br><span class="line">			<span class="type">bool</span> rbutton	:<span class="number">1</span>;		<span class="comment">// Indicates whether the right mouse button is pressed.</span></span><br><span class="line">			<span class="type">short</span> x;				<span class="comment">// The x-coordinate of the cursor.</span></span><br><span class="line">			<span class="type">short</span> y;				<span class="comment">// The y-coordinate of the cursor.</span></span><br><span class="line">			<span class="type">short</span> wheel;			<span class="comment">// The distance the wheel is rotated, expressed in multiples or divisions of 120.</span></span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Data of the key message</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">		&#123;</span></span><br><span class="line">			BYTE vkcode;			<span class="comment">// The virtual-key code of the key.</span></span><br><span class="line">			BYTE scancode;			<span class="comment">// The scan code of the key. The value depends on the OEM.</span></span><br><span class="line">			<span class="type">bool</span> extended	:<span class="number">1</span>;		<span class="comment">// Indicates whether the key is an extended key, such as a function key or a key on the numeric keypad. The value is true if the key is an extended key; otherwise, it is false.</span></span><br><span class="line">			<span class="type">bool</span> prevdown	:<span class="number">1</span>;		<span class="comment">// Indicates whether the key is previously up or down.</span></span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Data of the char message</span></span><br><span class="line">		TCHAR ch;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Data of the window message</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">		&#123;</span></span><br><span class="line">			WPARAM wParam;</span><br><span class="line">			LPARAM lParam;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Message Function</span></span><br><span class="line">ExMessage <span class="title function_">getmessage</span><span class="params">(BYTE filter = <span class="number">-1</span>)</span>;										<span class="comment">// Get a message until a message is available for retrieval.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getmessage</span><span class="params">(ExMessage *msg, BYTE filter = <span class="number">-1</span>)</span>;							<span class="comment">// Get a message until a message is available for retrieval.</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">peekmessage</span><span class="params">(ExMessage *msg, BYTE filter = <span class="number">-1</span>, <span class="type">bool</span> removemsg = <span class="literal">true</span>)</span>;	<span class="comment">// Get a message if any exist, otherwise return false.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">flushmessage</span><span class="params">(BYTE filter = <span class="number">-1</span>)</span>;										<span class="comment">// Flush the message buffer.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言23</title>
    <url>/2022/03/12/c%E8%AF%AD%E8%A8%8023/</url>
    <content><![CDATA[<h1 id="c语言23"><a href="#c语言23" class="headerlink" title="c语言23"></a>c语言23</h1><h2 id="23-1-图书馆管理系统"><a href="#23-1-图书馆管理系统" class="headerlink" title="23.1 图书馆管理系统"></a>23.1 图书馆管理系统</h2><p>简易版本</p>
<p>功能：</p>
<p>选择学生端和管理端</p>
<p>登录和注册(管理)(学生)</p>
<p>密码错误锁定账户(学生)</p>
<p>账户的解除锁定(管理)</p>
<p>书籍的查询，借阅和归还(学生)</p>
<p>书籍的查询，增加和减少(管理)</p>
<p>座位的预定和释放(学生)</p>
<p>座位的释放和锁定(管理)</p>
<p>特点：</p>
<p>程序利用函数转跳的方式，简洁明了</p>
<p>但是堆栈并未释放，导致过度使用内存</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 用户名 学生   </span></span><br><span class="line"><span class="comment">2 密码 管理员 </span></span><br><span class="line"><span class="comment">3 手机</span></span><br><span class="line"><span class="comment">i  id</span></span><br><span class="line"><span class="comment">t  type</span></span><br><span class="line"><span class="comment">-1 占用</span></span><br><span class="line"><span class="comment">-2 锁定</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> name_max 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> name_min 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pwd_max 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pwd_min 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> book_max 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> seat_max 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> line_change 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wrongtype</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">welcome</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">id</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">regist</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">login</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">type</span><span class="params">(<span class="type">int</span> t)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> t, <span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pwd</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">student</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">admin</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seatopeate</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seatshow</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">release</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">choose</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bookopeate</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bookopeate0</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seatopeate0</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bookshow</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delet</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmove</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">borrowORreturn</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">char</span> name[name_max+<span class="number">1</span>];</span><br><span class="line">	<span class="type">char</span> pwd[pwd_max+<span class="number">1</span>];</span><br><span class="line">	<span class="type">char</span> phone[<span class="number">11</span>];</span><br><span class="line">	<span class="type">int</span> lock;</span><br><span class="line">	<span class="type">int</span> seat;</span><br><span class="line">	<span class="type">int</span> book[book_max+<span class="number">1</span>];</span><br><span class="line">&#125;user;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="type">char</span> writer[<span class="number">20</span>];</span><br><span class="line">	<span class="type">int</span> own;</span><br><span class="line">	<span class="type">int</span> out;</span><br><span class="line">	<span class="type">int</span> been;</span><br><span class="line">&#125;book;</span><br><span class="line">FILE* fp;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">666</span>],twin[<span class="number">666</span>];</span><br><span class="line">user fbufo,fbufi;</span><br><span class="line"><span class="type">int</span> seat[seat_max+<span class="number">1</span>] ;<span class="comment">//0号位不坐人</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;color 70&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(_access(<span class="string">&quot;seat.dat&quot;</span>, <span class="number">0</span>))&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= seat_max; i++) &#123;</span><br><span class="line">			seat[i] = i;</span><br><span class="line">		&#125;</span><br><span class="line">		fp = fopen(<span class="string">&quot;seat.dat&quot;</span>, <span class="string">&quot;wb+&quot;</span>);</span><br><span class="line">		fwrite(&amp;seat, <span class="number">1</span>, <span class="keyword">sizeof</span>(seat), fp);</span><br><span class="line">		fclose(fp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (_access(<span class="string">&quot;user.dat&quot;</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">		fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;wb+&quot;</span>);</span><br><span class="line">		fclose(fp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (_access(<span class="string">&quot;book.dat&quot;</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">		fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;wb+&quot;</span>);</span><br><span class="line">		fclose(fp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	welcome();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">wrongtype</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> i)</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;没有这个选项\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、返回\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、退出\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">		<span class="keyword">if</span> (a == <span class="number">1</span>) &#123; welcome(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>) &#123; id(i); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">3</span>) &#123; login(i); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">4</span>) &#123; student(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">5</span>) &#123; system(<span class="string">&quot;cls&quot;</span>); seatopeate(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">6</span>) &#123; admin(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">7</span>) &#123; system(<span class="string">&quot;cls&quot;</span>);bookopeate0(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">8</span>) &#123; change(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">9</span>) &#123; bookopeate(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">10</span>) &#123; borrowORreturn(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">11</span>) &#123; seatopeate0(); &#125;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(a,i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">welcome</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;欢迎使用图书馆系统\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请确认您的身份\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、我是学生\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、我是管理员\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、退出\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:id(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:id(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">id</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (i == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;欢迎学生端\n&quot;</span>); &#125;</span><br><span class="line">	<span class="keyword">else</span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;欢迎管理端\n&quot;</span>); &#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请确认您的操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、登录\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、注册\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、返回上级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:login(i);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:regist(i);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:welcome();</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(<span class="number">2</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">regist</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (i == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;欢迎学生端\n&quot;</span>); &#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;欢迎管理端\n&quot;</span>); &#125;</span><br><span class="line">	fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;ab+&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;文件打开错误\n&quot;</span>); <span class="keyword">while</span> (<span class="number">1</span>); &#125;</span><br><span class="line">	<span class="built_in">memset</span>(&amp;fbufi, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(fbufi));</span><br><span class="line">	fbufi.id = i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按esc返回主页\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请创建你的用户名\n由6至12位的数字和英文且必须有英文\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		type(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="number">1</span>, i)) &#123; <span class="built_in">printf</span>(<span class="string">&quot;用户名已存在,请重新输入\n&quot;</span>); &#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="built_in">strcpy</span>(fbufi.name,buf); <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你的密码\n6至12位\n&quot;</span>);</span><br><span class="line">	type(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">memset</span>(&amp;twin, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(twin));</span><br><span class="line">	<span class="built_in">strcpy</span>(twin, buf);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请确认你的密码\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		type(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(twin, buf) == <span class="number">0</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">		<span class="keyword">else</span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;密码不一致，请重新确认你的密码\n&quot;</span>); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">strcpy</span>(fbufi.pwd, buf);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;注册成功\n&quot;</span>);</span><br><span class="line">	<span class="comment">//printf(&quot;%d %s %s&quot;, fbufi.id, fbufi.name, fbufi.pwd);</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、绑定你的手机\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;任意键回到主页\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fwrite(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">		fclose(fp);</span><br><span class="line">		welcome();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入你的手机\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		type(<span class="number">3</span>);</span><br><span class="line">		<span class="keyword">if</span> (check(<span class="number">3</span>, i) == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;手机已存在,请重新输入\n&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">strcpy</span>(fbufi.phone, buf);</span><br><span class="line">	<span class="comment">//printf(&quot;%d %s %s %s&quot;, fbufi.id, fbufi.name, fbufi.pwd,fbufi.phone);</span></span><br><span class="line">	fwrite(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;注册成功\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;任意键回到主页\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	welcome();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">login</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (i == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;欢迎学生端\n&quot;</span>); &#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;欢迎管理端\n&quot;</span>); &#125;</span><br><span class="line">	fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;ab+&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;文件打开错误\n&quot;</span>); <span class="keyword">while</span> (<span class="number">1</span>); &#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请确认您的操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、用户名登录\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、手机登录\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、返回上级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;按esc返回主页\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入你的用户名\n&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">			type(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (!check(<span class="number">1</span>, i)) &#123; <span class="built_in">printf</span>(<span class="string">&quot;用户名不存在,请重新输入\n&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pwd(i);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;按esc返回主页\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入你的手机\n&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">			type(<span class="number">3</span>);</span><br><span class="line">			<span class="keyword">if</span> (!check(<span class="number">3</span>,i)) &#123; <span class="built_in">printf</span>(<span class="string">&quot;手机不存在,请重新输入\n&quot;</span>); <span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pwd(i);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">		fclose(fp);</span><br><span class="line">		id(i);</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fclose(fp);</span><br><span class="line">		wrongtype(<span class="number">3</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">type</span><span class="params">(<span class="type">int</span> t)</span> &#123;</span><br><span class="line">	<span class="built_in">memset</span>(&amp;buf, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		b = _getch();</span><br><span class="line">		<span class="keyword">if</span> (b == <span class="number">27</span>) &#123; fclose(fp); welcome(); &#125;</span><br><span class="line">		<span class="keyword">if</span> (b == <span class="number">13</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (t == <span class="number">1</span> &amp;&amp; <span class="built_in">strlen</span>(buf) &lt;= name_max &amp;&amp; <span class="built_in">strlen</span>(buf) &gt;= name_min &amp;&amp; c &gt; <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (t == <span class="number">2</span> &amp;&amp; <span class="built_in">strlen</span>(buf) &lt;= pwd_max &amp;&amp; <span class="built_in">strlen</span>(buf) &gt;= pwd_min ) &#123; <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (t == <span class="number">3</span> &amp;&amp; <span class="built_in">strlen</span>(buf) == <span class="number">11</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="keyword">break</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">8</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">				i -= <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> ((<span class="string">&#x27;a&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class="string">&#x27;z&#x27;</span>) || (<span class="string">&#x27;A&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class="string">&#x27;Z&#x27;</span>)) &#123; c -= <span class="number">1</span>; &#125;</span><br><span class="line">				buf[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\b \b&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((<span class="string">&#x27;a&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class="string">&#x27;z&#x27;</span>) || (<span class="string">&#x27;A&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class="string">&#x27;Z&#x27;</span>)) &#123;</span><br><span class="line">					c += <span class="number">1</span>;</span><br><span class="line">					buf[i++] = b;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, b);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">					buf[i++] = b;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, b);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">2</span>)&#123;</span><br><span class="line">				buf[i++] = b;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">3</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">					buf[i++] = b;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, b);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> t, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fp=fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(fread(&amp;fbufo, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp))&#123;</span><br><span class="line">		<span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, fbufo.name) == <span class="number">0</span>&amp;&amp;fbufo.id==i) &#123; fclose(fp); <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, fbufo.phone) == <span class="number">0</span> &amp;&amp; fbufo.id == i) &#123; fclose(fp); <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fp=fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;ab+&quot;</span>);</span><br><span class="line">	 <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pwd</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入密码\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按esc返回主页\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		fseek(fp, -<span class="keyword">sizeof</span>(user), SEEK_CUR);</span><br><span class="line">		fwrite(&amp;fbufo, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">		<span class="keyword">if</span>(fbufo.lock==<span class="number">1</span>)&#123; <span class="built_in">printf</span>(<span class="string">&quot;还有2次输入机会\n&quot;</span>); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (fbufo.lock == <span class="number">2</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;还有1次输入机会\n&quot;</span>); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (fbufo.lock == <span class="number">3</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;该账号已被锁定，请寻找管理员\n按任意键退出系统&quot;</span>); system(<span class="string">&quot;pause&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line">		type(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(buf, fbufo.pwd)) &#123; <span class="built_in">printf</span>(<span class="string">&quot;密码错误\n&quot;</span>); fbufo.lock += <span class="number">1</span>; &#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; fbufo.lock = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fseek(fp, -<span class="keyword">sizeof</span>(user), SEEK_CUR);</span><br><span class="line">	fwrite(&amp;fbufo, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">	<span class="keyword">if</span> (i == <span class="number">1</span>) &#123; fclose(fp); <span class="built_in">memcpy</span>(&amp;fbufi, &amp;fbufo, <span class="keyword">sizeof</span>(user)); student(); &#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(i==<span class="number">2</span>) &#123; fclose(fp); <span class="built_in">memcpy</span>(&amp;fbufi, &amp;fbufo, <span class="keyword">sizeof</span>(user)); admin(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">student</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s 用户 你好\n&quot;</span>,fbufo.name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、座位操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、图书操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、登出\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:system(<span class="string">&quot;cls&quot;</span>); seatopeate();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:system(<span class="string">&quot;cls&quot;</span>); bookopeate();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:welcome();</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(<span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">admin</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s 管理员 你好\n&quot;</span>, fbufo.name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、图书操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、座位操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、登出\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:system(<span class="string">&quot;cls&quot;</span>);  bookopeate0();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:system(<span class="string">&quot;cls&quot;</span>); seatopeate0();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:welcome();</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seatopeate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">memcpy</span>(&amp;fbufo, &amp;fbufi, <span class="keyword">sizeof</span>(user));</span><br><span class="line">	fp = fopen(<span class="string">&quot;seat.dat&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	fread(&amp;seat, <span class="number">1</span>, <span class="keyword">sizeof</span>(seat), fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在进行位置操作\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!fbufi.seat) &#123; <span class="built_in">printf</span>(<span class="string">&quot;你没有占用位置\n&quot;</span>); &#125;</span><br><span class="line">	<span class="keyword">else</span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;你正在占用%d号位置\n&quot;</span>, fbufi.seat); &#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、显示座位\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、释放座位\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、选择座位\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4、返回上级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:seatshow(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:release();</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">			<span class="keyword">if</span> (!fbufi.seat) &#123; choose(); &#125;</span><br><span class="line">			<span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;你正在占用%d号位置\n&quot;</span>, fbufi.seat); &#125;</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">			seatopeate();</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: student();</span><br><span class="line">		<span class="keyword">default</span>:wrongtype(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seatshow</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">	fp = fopen(<span class="string">&quot;seat.dat&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	fread(&amp;seat, <span class="number">1</span>, <span class="keyword">sizeof</span>(seat), fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= seat_max; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(seat[i]==<span class="number">-1</span>)&#123; <span class="built_in">printf</span>(<span class="string">&quot;*  &quot;</span>); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (seat[i] == <span class="number">-2</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;!  &quot;</span>); &#125;</span><br><span class="line">		<span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, seat[i]); &#125;</span><br><span class="line">		<span class="keyword">if</span> (i % line_change == <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;按任意键后继续选择...\n&quot;);</span></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (id ==<span class="number">0</span>) &#123; seatopeate0(); &#125;</span><br><span class="line">	seatopeate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">	seat[fbufi.seat] = fbufi.seat;</span><br><span class="line">	fp = fopen(<span class="string">&quot;seat.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;文件打开错误\n&quot;</span>); <span class="keyword">while</span> (<span class="number">1</span>); &#125;</span><br><span class="line">	fwrite(&amp;seat, <span class="number">1</span>, <span class="keyword">sizeof</span>(seat), fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;ab+&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;文件打开错误\n&quot;</span>); <span class="keyword">while</span> (<span class="number">1</span>); &#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		fread(&amp;fbufo, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">memcmp</span>(&amp;fbufi, &amp;fbufo, <span class="keyword">sizeof</span>(user))) &#123;</span><br><span class="line">			fseek(fp, -<span class="keyword">sizeof</span>(user), SEEK_CUR);</span><br><span class="line">			fbufi.seat = <span class="number">0</span>;</span><br><span class="line">			fwrite(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">			<span class="built_in">memcpy</span>(&amp;fbufo, &amp;fbufi, <span class="keyword">sizeof</span>(user));</span><br><span class="line">			fclose(fp);</span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">			seatopeate();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">choose</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请选择位置\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入0返回\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> b,r;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		r=<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">		<span class="keyword">if</span> (b == <span class="number">0</span>) &#123; 	system(<span class="string">&quot;cls&quot;</span>);seatopeate(); &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> &lt;= b &amp;&amp; b &lt;= seat_max) &#123;</span><br><span class="line">			<span class="keyword">if</span> (seat[b] == b) &#123;</span><br><span class="line">				seat[b] = <span class="number">-1</span>;</span><br><span class="line">				fp = fopen(<span class="string">&quot;seat.dat&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">				fwrite(&amp;seat, <span class="number">1</span>, <span class="keyword">sizeof</span>(seat), fp);</span><br><span class="line">				fclose(fp);</span><br><span class="line">				fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;ab+&quot;</span>);</span><br><span class="line">				<span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;文件打开错误\n&quot;</span>); <span class="keyword">while</span> (<span class="number">1</span>); &#125;</span><br><span class="line">				<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">					fread(&amp;fbufo, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">					<span class="keyword">if</span> (!<span class="built_in">memcmp</span>(&amp;fbufo, &amp;fbufo, <span class="keyword">sizeof</span>(user))) &#123;</span><br><span class="line">						fseek(fp, -<span class="keyword">sizeof</span>(user), SEEK_CUR);</span><br><span class="line">						fbufi.seat = b;</span><br><span class="line">						fwrite(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">						<span class="built_in">memcpy</span>(&amp;fbufo, &amp;fbufi, <span class="keyword">sizeof</span>(user));</span><br><span class="line">						fclose(fp);</span><br><span class="line">						system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">						seatopeate();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;位置不可用请重选\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;位置不可用请重选\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bookopeate</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">memcpy</span>(&amp;fbufo, &amp;fbufi, <span class="keyword">sizeof</span>(user));</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s 用户 你好\n&quot;</span>, fbufo.name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、查看书库\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、书籍查询\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、借还书籍\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4、返回上级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:bookshow(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:search(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:borrowORreturn();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:student();</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(<span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bookopeate0</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">memcpy</span>(&amp;fbufo, &amp;fbufi, <span class="keyword">sizeof</span>(user));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在进行图书操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、显示书库\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、搜索\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、增删改\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4、返回上级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:bookshow(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:search(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:change();</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:admin();</span><br><span class="line">		<span class="keyword">default</span>:wrongtype(<span class="number">7</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seatopeate0</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s 管理员 你好\n&quot;</span>, fbufo.name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在进行座位操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、显示\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、释放\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、锁定\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4、返回\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">		seatshow(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入要释放的位置\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">		<span class="keyword">if</span> (num == <span class="number">0</span> || num &gt; seat_max) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;没有此位置\n&quot;</span>);</span><br><span class="line">			<span class="comment">//printf(&quot;按任意键选择\n&quot;);</span></span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			seatopeate0();</span><br><span class="line">		&#125;</span><br><span class="line">		seat[num] = num;</span><br><span class="line">		fp = fopen(<span class="string">&quot;seat.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">		fwrite(&amp;seat, <span class="number">1</span>, <span class="keyword">sizeof</span>(seat), fp);</span><br><span class="line">		fclose(fp);</span><br><span class="line">		fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (fread(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (fbufi.seat == num) &#123; </span><br><span class="line">				fbufi.seat = <span class="number">0</span>;</span><br><span class="line">				fseek(fp, -<span class="keyword">sizeof</span>(user), SEEK_CUR);</span><br><span class="line">				fwrite(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">				<span class="built_in">memcpy</span>(&amp;fbufi, &amp;fbufo, <span class="keyword">sizeof</span>(user));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		fclose(fp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;操作成功\n&quot;</span>);</span><br><span class="line">		<span class="comment">//printf(&quot;按任意键选择\n&quot;);</span></span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		seatopeate0();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入要锁定的位置\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">		<span class="keyword">if</span> (num == <span class="number">0</span> || num &gt; seat_max) &#123; </span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;没有此位置\n&quot;</span>); </span><br><span class="line">			<span class="comment">//printf(&quot;按任意键选择\n&quot;);</span></span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			seatopeate0();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (seat[num] == <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;此位置被占用，请先释放\n&quot;</span>);</span><br><span class="line">			<span class="comment">//printf(&quot;按任意键选择\n&quot;);</span></span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			seatopeate0();</span><br><span class="line">		&#125;</span><br><span class="line">		seat[num] = <span class="number">-2</span>;</span><br><span class="line">		fp = fopen(<span class="string">&quot;seat.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">		fwrite(&amp;seat, <span class="number">1</span>, <span class="keyword">sizeof</span>(seat), fp);</span><br><span class="line">		fclose(fp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;操作成功\n&quot;</span>);</span><br><span class="line">		<span class="comment">//printf(&quot;按任意键选择\n&quot;);</span></span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		seatopeate0();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:admin();</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(<span class="number">11</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bookshow</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;编号\t书名\t作者\t在馆\t借出\t被借次数\n&quot;</span>);</span><br><span class="line">	fp= fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (fread(&amp;book,<span class="number">1</span>,<span class="keyword">sizeof</span>(book),fp)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.2d\t%s\t%s\t%.2d\t%.2d\t%.2d\n&quot;</span>, book.id, book.name, book.writer, book.own, book.out, book.been);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键返回\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (id == <span class="number">0</span>) &#123; bookopeate0(); &#125;</span><br><span class="line">	bookopeate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;按任意键后，输入书籍或者作者完整名\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;返回请按esc返回\n&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (_getch() == <span class="number">27</span>) &#123; </span><br><span class="line">			system(<span class="string">&quot;cls&quot;</span>); </span><br><span class="line">			<span class="keyword">if</span> (id == <span class="number">0</span>) &#123; bookopeate0(); &#125;</span><br><span class="line">			bookopeate();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">char</span> searchName[<span class="number">666</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">		<span class="type">int</span> r;</span><br><span class="line">		r=<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, searchName);</span><br><span class="line">		fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (fread(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">strcmp</span>(book.name, searchName) == <span class="number">0</span> || <span class="built_in">strcmp</span>(book.writer, searchName) == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;编号\t书名\t作者\t在馆\t借出\t被借次数\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%.2d\t%s\t%s\t%.2d\t%.2d\t%.2d\n&quot;</span>, book.id, book.name, book.writer, book.own, book.out, book.been);</span><br><span class="line">				fclose(fp);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">				system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				search(id);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查无此项\n&quot;</span>);</span><br><span class="line">		fclose(fp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		search(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">()</span> &#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;正在进行图书操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、增加书籍\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、删除书籍\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、修改书籍\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4、返回上级\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:add();</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:delet();</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:rmove();</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:system(<span class="string">&quot;cls&quot;</span>); bookopeate();</span><br><span class="line">		<span class="keyword">default</span>:wrongtype(<span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;返回请按esc\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;否则按任意键后，请输入要添加的书名\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (_getch() == <span class="number">27</span>) &#123; system(<span class="string">&quot;cls&quot;</span>); bookopeate0(); &#125;</span><br><span class="line">	<span class="type">char</span> searchName[<span class="number">666</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">int</span> r,addnum;</span><br><span class="line">	r = <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, searchName);</span><br><span class="line">	fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (fread(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(book.name, searchName) == <span class="number">0</span> ) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;本书已存在，请输入增加的本数\n&quot;</span>);</span><br><span class="line">			r = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;addnum);</span><br><span class="line">			book.own += addnum;</span><br><span class="line">			fseek(fp, -<span class="keyword">sizeof</span>(book), SEEK_CUR);</span><br><span class="line">			fwrite(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp);</span><br><span class="line">			fclose(fp);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			add();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	book.id += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(book.name, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(book.name));</span><br><span class="line">	<span class="built_in">strcpy</span>(book.name, searchName);</span><br><span class="line">	<span class="built_in">memset</span>(book.writer, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(book.writer));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入作者名字\n&quot;</span>);</span><br><span class="line">	r = <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book.writer);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入添加数量\n&quot;</span>);</span><br><span class="line">	r = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;book.own);</span><br><span class="line">	book.out = <span class="number">0</span>;</span><br><span class="line">	book.been = <span class="number">0</span>;</span><br><span class="line">	fwrite(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delet</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键后，请输入要删除的书名\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;返回请按esc返回\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (_getch() == <span class="number">27</span>) &#123; system(<span class="string">&quot;cls&quot;</span>); bookopeate0(); &#125;</span><br><span class="line">	<span class="type">char</span> searchName[<span class="number">666</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">int</span> r, addnum;</span><br><span class="line">	r = <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, searchName);</span><br><span class="line">	fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (fread(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(book.name, searchName) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入删除的本数\n&quot;</span>);</span><br><span class="line">			r = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;addnum);</span><br><span class="line">			<span class="keyword">if</span> (addnum &gt; book.own) &#123; </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;没有这么多书籍\n&quot;</span>);</span><br><span class="line">				fclose(fp);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">				system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				delet();</span><br><span class="line">			&#125;</span><br><span class="line">			book.own -= addnum;</span><br><span class="line">			fseek(fp, -<span class="keyword">sizeof</span>(book), SEEK_CUR);</span><br><span class="line">			fwrite(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp);</span><br><span class="line">			fclose(fp);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			delet();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;本书不存在\n&quot;</span>);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	delet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmove</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键后，请输入要修改的书名\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;返回请按esc返回\n&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (_getch() == <span class="number">27</span>) &#123; system(<span class="string">&quot;cls&quot;</span>); bookopeate0(); &#125;</span><br><span class="line">	<span class="type">char</span> searchName[<span class="number">666</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">int</span> r;</span><br><span class="line">	r = <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, searchName);</span><br><span class="line">	fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (fread(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(book.name, searchName) == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;不修改该项按esc\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;按任意键后，修改书名:&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (_getch() != <span class="number">27</span>) &#123; r = <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book.name); &#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n按任意键后，修改作者名:&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (_getch() != <span class="number">27</span>) &#123; r = <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, book.writer); &#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n按任意键后，修改在馆量:&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (_getch() != <span class="number">27</span>) &#123; r = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;book.own); &#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n按任意键后，修改借出量:&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (_getch() != <span class="number">27</span>) &#123; r = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;book.out); &#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n按任意键后，修改被借阅量:&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (_getch() != <span class="number">27</span>) &#123; r = <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;book.been); &#125;</span><br><span class="line">			fseek(fp, -<span class="keyword">sizeof</span>(book), SEEK_CUR);</span><br><span class="line">			fwrite(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp);</span><br><span class="line">			fclose(fp);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n按任意键继续\n&quot;</span>);</span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			rmove();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;本书不存在\n&quot;</span>);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按任意键继续\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	rmove();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">borrowORreturn</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> flag;</span><br><span class="line">	<span class="built_in">memcpy</span>(&amp;fbufo, &amp;fbufi, <span class="keyword">sizeof</span>(user));</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strlen</span>(fbufo.book) == <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;您没有借用书籍\n&quot;</span>); flag = <span class="number">0</span>; &#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你借阅了：\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(fbufo.book); i++) &#123;</span><br><span class="line">			fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">			<span class="keyword">while</span> (fread(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (book.id == fbufi.book[i]) &#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, book.name);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			fclose(fp);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1、还书\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2、借书\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3、返回上级\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">switch</span> (_getch()) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) &#123; borrowORreturn(); &#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入要还的书的编号：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		<span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;你没有借阅此书\n&quot;</span>);</span><br><span class="line">			<span class="comment">//printf(&quot;按任意键继续\n&quot;);</span></span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			borrowORreturn();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(fbufi.book); i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id == fbufi.book[i]) &#123;</span><br><span class="line">				fbufi.book[i] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; book_max; j++) &#123;</span><br><span class="line">					fbufi.book[j] = fbufi.book[j + <span class="number">1</span>];</span><br><span class="line">				&#125;</span><br><span class="line">				fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">				<span class="keyword">while</span> (fread(&amp;fbufo, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp)) &#123;</span><br><span class="line">					<span class="keyword">if</span> (<span class="built_in">strcmp</span>(fbufi.name, fbufo.name) == <span class="number">0</span> &amp;&amp; fbufo.id == fbufi.id) &#123;</span><br><span class="line">						fseek(fp, -<span class="keyword">sizeof</span>(user), SEEK_CUR);</span><br><span class="line">						fwrite(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp);</span><br><span class="line">						fclose(fp);</span><br><span class="line">						fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">						<span class="keyword">while</span> (fread(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp)) &#123;</span><br><span class="line">							<span class="keyword">if</span> (book.id == id) &#123;</span><br><span class="line">								book.out -= <span class="number">1</span>;</span><br><span class="line">								book.own += <span class="number">1</span>;</span><br><span class="line">								fseek(fp, -<span class="keyword">sizeof</span>(book), SEEK_CUR);</span><br><span class="line">								fwrite(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp);</span><br><span class="line">								fclose(fp);</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;还书成功\n&quot;</span>);</span><br><span class="line">				<span class="comment">//printf(&quot;按任意键继续\n&quot;);</span></span><br><span class="line">				system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				borrowORreturn();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;你没有借阅此书\n&quot;</span>);</span><br><span class="line">		<span class="comment">//printf(&quot;按任意键继续\n&quot;);</span></span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		borrowORreturn();</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strlen</span>(fbufo.book) == book_max) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;借阅书籍已达上限\n&quot;</span>);</span><br><span class="line">			<span class="comment">//printf(&quot;按任意键返回\n&quot;);</span></span><br><span class="line">			system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">			borrowORreturn();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入借的书的编号：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">		fp = fopen(<span class="string">&quot;book.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span> (fread(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (book.id == id) &#123;</span><br><span class="line">				<span class="keyword">if</span> (book.own &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					book.out += <span class="number">1</span>;</span><br><span class="line">					book.own -= <span class="number">1</span>;</span><br><span class="line">					book.been += <span class="number">1</span>;</span><br><span class="line">					fseek(fp, -<span class="keyword">sizeof</span>(book), SEEK_CUR);</span><br><span class="line">					fwrite(&amp;book, <span class="number">1</span>, <span class="keyword">sizeof</span>(book), fp);</span><br><span class="line">					fclose(fp);</span><br><span class="line">					fp = fopen(<span class="string">&quot;user.dat&quot;</span>, <span class="string">&quot;rb+&quot;</span>);</span><br><span class="line">					<span class="keyword">while</span> (fread(&amp;fbufo, <span class="number">1</span>, <span class="keyword">sizeof</span>(user), fp)) &#123;</span><br><span class="line">						<span class="keyword">if</span> (<span class="built_in">strcmp</span>(fbufi.name, fbufo.name) == <span class="number">0</span> &amp;&amp; fbufo.id == fbufi.id) &#123;</span><br><span class="line">							fbufi.book[<span class="built_in">strlen</span>(fbufi.book) ] = id;</span><br><span class="line">							fseek(fp, -<span class="keyword">sizeof</span>(fbufi), SEEK_CUR);</span><br><span class="line">							fwrite(&amp;fbufi, <span class="number">1</span>, <span class="keyword">sizeof</span>(fbufi), fp);</span><br><span class="line">							fclose(fp);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;借书成功\n&quot;</span>);</span><br><span class="line">					<span class="comment">//printf(&quot;按任意键继续\n&quot;);</span></span><br><span class="line">					system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">					borrowORreturn();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;书库没有此书\n&quot;</span>);</span><br><span class="line">		<span class="comment">//printf(&quot;按任意键继续\n&quot;);</span></span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		borrowORreturn();</span><br><span class="line">	<span class="keyword">case</span><span class="number">&#x27;3&#x27;</span>:bookopeate();</span><br><span class="line">	<span class="keyword">default</span>:wrongtype(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>写博客简易快捷桌面脚本</title>
    <url>/2022/03/14/%E5%86%99%E5%8D%9A%E5%AE%A2%E5%BF%AB%E6%8D%B7%E6%A1%8C%E9%9D%A2%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="写博客简易快捷桌面脚本"><a href="#写博客简易快捷桌面脚本" class="headerlink" title="写博客简易快捷桌面脚本"></a>写博客简易快捷桌面脚本</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>新建记事本.txt复制以下代码<br>修改代码中的  你博客所在的位置<br>另存为写博客.bat，编码改为ansi</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:_begin</span><br><span class="line">cls</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 创建博客 输入0后回车</span><br><span class="line"><span class="built_in">echo</span> 打开博客 输入1后回车</span><br><span class="line"><span class="built_in">echo</span> 进入hexo模式 输入2后回车</span><br><span class="line"><span class="built_in">echo</span> 退出cmd 输入其他任意键后回车</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p Info=</span><br><span class="line"><span class="keyword">if</span> %Info%==0 (</span><br><span class="line">goto _set</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> %Info%==1 (</span><br><span class="line">goto _open</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> %Info%==2 (</span><br><span class="line">goto _other</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">goto _end</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:_set</span><br><span class="line"><span class="built_in">echo</span> 请输入新创建博客的名称</span><br><span class="line"><span class="built_in">set</span> /p name=</span><br><span class="line">e:</span><br><span class="line"><span class="built_in">cd</span> 你博客所在的位置</span><br><span class="line"><span class="keyword">if</span> exist %name%.md (</span><br><span class="line">start 你博客所在的位置\<span class="built_in">source</span>\_posts\%name%.md</span><br><span class="line"><span class="built_in">echo</span> %name%  文件已打开</span><br><span class="line">goto _check</span><br><span class="line">) </span><br><span class="line">hexo n <span class="string">&quot;%name%&quot;</span> &amp; rd 你博客所在的位置\<span class="built_in">source</span>\_posts\%name%  &amp; start E:\你博客所在的位置\<span class="built_in">source</span>\_posts\%name%.md &amp; start E:\my_blog_luq\<span class="built_in">source</span>\_posts &amp; cmd</span><br><span class="line"></span><br><span class="line">:_open</span><br><span class="line">e:</span><br><span class="line"><span class="built_in">cd</span> 你博客所在的位置\<span class="built_in">source</span>\_posts</span><br><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line"><span class="built_in">dir</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 请输入要打开博客的名称</span><br><span class="line"><span class="built_in">set</span> /p name=</span><br><span class="line"><span class="keyword">if</span> exist %name%.md (</span><br><span class="line">start 你博客所在的位置\<span class="built_in">source</span>\_posts\%name%.md</span><br><span class="line"><span class="built_in">echo</span> %name%  文件已打开</span><br><span class="line">goto _check</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">start 你博客所在的位置\<span class="built_in">source</span>\_posts</span><br><span class="line"><span class="built_in">echo</span> %name%  不存在，已打开文件夹</span><br><span class="line">goto _check</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:_check</span><br><span class="line"><span class="built_in">echo</span> 继续创建打开文件 输入0后回车</span><br><span class="line"><span class="built_in">echo</span> 进入hexo模式 输入1后回车</span><br><span class="line"><span class="built_in">echo</span> 退出cmd 输入其他任意键后回车</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p a=</span><br><span class="line"><span class="keyword">if</span> %a%==0 (</span><br><span class="line">goto _begin</span><br><span class="line"><span class="keyword">if</span> %a%==1 (</span><br><span class="line">goto _other</span><br><span class="line"><span class="keyword">else</span> (</span><br><span class="line">goto _end</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:_end</span><br><span class="line"><span class="keyword">else</span>(<span class="built_in">exit</span>)</span><br><span class="line">:_other</span><br><span class="line">cls</span><br><span class="line">e:</span><br><span class="line"><span class="built_in">cd</span> 你博客所在的位置</span><br><span class="line">cmd /k</span><br><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="修改图标并隐藏"><a href="#修改图标并隐藏" class="headerlink" title="修改图标并隐藏"></a>修改图标并隐藏</h2><p>右键.bat文件，创建快捷方式</p>
<p>右键.bat文件，打开属性</p>
<p>在常规中，勾选隐藏</p>
<p>右键单击快捷方式图标，打开属性</p>
<p>点击常规，修改为你想要的名字(重命名，这里可以不要后缀)</p>
<p>点击快捷方式，点击更改图标，修改为你想要的图标</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>函数、极限、连续</title>
    <url>/2022/03/14/%E5%87%BD%E6%95%B0%E3%80%81%E6%9E%81%E9%99%90%E3%80%81%E8%BF%9E%E7%BB%AD/</url>
    <content><![CDATA[<h1 id="函数、极限、连续"><a href="#函数、极限、连续" class="headerlink" title="函数、极限、连续"></a>函数、极限、连续</h1><p>注意：只收录方法和简易(重要)定义(用于复习)</p>
<h2 id="求极限技巧"><a href="#求极限技巧" class="headerlink" title="求极限技巧"></a>求极限技巧</h2><p>构造→无穷小替换→洛必达或重要极限(回绕使用)</p>
<h3 id="极限运算："><a href="#极限运算：" class="headerlink" title="极限运算："></a>极限运算：</h3><p>四则运算，幂运算可出入lim极限<br>注意，出入后的两个lim均存在，除法分母不低于0</p>
<h3 id="准则："><a href="#准则：" class="headerlink" title="准则："></a>准则：</h3><p>夹逼<br>f1 &lt; f2 &lt; f3<br>lim f1 &#x3D; lim f3 &#x3D; A<br>则有 lim f2  A</p>
<p>数列<br>单调，有界<br>则一定有极限</p>
<h3 id="构造技巧"><a href="#构造技巧" class="headerlink" title="构造技巧"></a>构造技巧</h3><p>1、和差化为分式，因式<br>2、x→∞化为x→0<br>3、x^y&#x3D;e^(ylnx)<br>4、根号和差利用平方差<br>5、±1构造重要极限</p>
<h3 id="α为无穷小，有以下性质："><a href="#α为无穷小，有以下性质：" class="headerlink" title="α为无穷小，有以下性质："></a>α为无穷小，有以下性质：</h3><p>n * α &#x3D; α<br>有界函数 * α &#x3D; α<br>α ^ n &#x3D; α</p>
<h3 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h3><p>精度最高</p>
<h3 id="无穷小替换"><a href="#无穷小替换" class="headerlink" title="无穷小替换"></a>无穷小替换</h3><p>条件：因式<br>精度中等<br>x ~ sinx ~ tanx ~ arcsinx ~ arctanx ~ e^x-1 ~ ln(x+1) ~ (a^x-1)&#x2F;ln(a) ~ loga(x+1)ln(a) ~ ln(x+(x^2+1)^1&#x2F;2) ~ x&#x2F;(1+x)</p>
<h3 id="洛必达"><a href="#洛必达" class="headerlink" title="洛必达"></a>洛必达</h3><p>条件：分式，上下可导 或 0&#x2F;0 或 ∞&#x2F;∞<br>精度低</p>
<h3 id="重要极限-x→0"><a href="#重要极限-x→0" class="headerlink" title="重要极限(x→0)"></a>重要极限(x→0)</h3><p>(1+x)^(1&#x2F;x)&#x3D;e<br>sinx&#x2F;x&#x3D;1<br>(1-cosx)&#x2F;x^2&#x3D;(x-sinx)&#x2F;(x^3&#x2F;3)&#x3D;1&#x2F;2<br>(sec^2-1)&#x2F;x^2&#x3D;1</p>
<h2 id="连续、间断"><a href="#连续、间断" class="headerlink" title="连续、间断"></a>连续、间断</h2><p>定义一：存在dx则dy存在<br>定义二：f(x-)&#x3D;f(x)&#x3D;f(x+)<br>(基本)初等函数在D中连续，四则，符合，反函数仍在D连续</p>
<p>第一类间断点：跳跃，可取<br>第二类间断点：无穷，震荡</p>
<p>零点定理 &#x3D;&gt;  界值定理<br>一直连续性|f(x1)-f(x2)| &lt; σ</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>有界性，单调性，周期性，奇偶性</p>
<h2 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h2><p>唯一性，(局部)有界，(局部)保号性</p>
<p>保号性：极限保函数正负号(不带等号，反过来要等号)</p>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>导数、微分</title>
    <url>/2022/03/16/%E5%AF%BC%E6%95%B0%E3%80%81%E5%BE%AE%E5%88%86/</url>
    <content><![CDATA[<h1 id="导数、微分"><a href="#导数、微分" class="headerlink" title="导数、微分"></a>导数、微分</h1><p>注意：只收录方法和简易(重要)定义(用于复习)</p>
<h2 id="求导技巧"><a href="#求导技巧" class="headerlink" title="求导技巧"></a>求导技巧</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>f’+() &#x3D; f’-()  &#x3D;&gt;  f(+) &#x3D; f(-) &#x3D;f()即可导一定连续，连续不一定可导<br>分段函数要先判断是否连续再判断是否可导</p>
<p>f’ &#x3D; lim x-&gt;x0 (f(x)-f(x0))&#x2F;(x-x0)<br>f’ &#x3D; lim △x-&gt;0   (f(x+△x)-f(x))&#x2F;△x<br>对于不方便直接用公式求导的，回归定义</p>
<h3 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h3><p>常数，+-，反函数，均与求极限类似</p>
<p>(uv)’ &#x3D; u’v +uv’<br>(u&#x2F;v)’ &#x3D; (u’v-uv’)&#x2F;(v^2)</p>
<p>链式法则(cr)<br>隐函数和微分求导要注意cr</p>
<h3 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h3><p>△y &#x3D; A△x +o(△x)<br>dx &#x3D; △x<br>dy &#x3D; A△x</p>
<h3 id="求导公式"><a href="#求导公式" class="headerlink" title="求导公式"></a>求导公式</h3><table>
<thead>
<tr>
<th>原函数</th>
<th>导数</th>
<th>原函数</th>
<th>导数</th>
</tr>
</thead>
<tbody><tr>
<td>c</td>
<td>0</td>
<td>arcsinx</td>
<td>1&#x2F;(1-x^2)^1&#x2F;2</td>
</tr>
<tr>
<td>sinx</td>
<td>cosx</td>
<td>arccosx</td>
<td>-1&#x2F;(1-x^2)^1&#x2F;2</td>
</tr>
<tr>
<td>cosx</td>
<td>-sinx</td>
<td>arctanx</td>
<td>1&#x2F;(1+x^2)</td>
</tr>
<tr>
<td>tanx</td>
<td>sec^2 x</td>
<td>arccotx</td>
<td>-1&#x2F;(1+x^2)</td>
</tr>
<tr>
<td>cotx</td>
<td>-csc^2 x</td>
<td>x^a</td>
<td>a * x^(a-1)</td>
</tr>
<tr>
<td>secx</td>
<td>secx * tanx</td>
<td>a^x</td>
<td>a^x * lna</td>
</tr>
<tr>
<td>cscx</td>
<td>-cscx * cotx</td>
<td>loga(x)</td>
<td>1&#x2F;(x * lna)</td>
</tr>
</tbody></table>
<p>变形：y^z&#x3D;e^(zlny)</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>高阶导数<br>参数方程求导</p>
]]></content>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
</search>
