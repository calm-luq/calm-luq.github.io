<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cpp随笔</title>
    <url>/2022/02/20/cpp%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c-变数范围"><a href="#c-变数范围" class="headerlink" title="c++变数范围"></a>c++变数范围</h1><p>变数在大陆叫变量，这一般指对象</p>
<p>范围指这个类（型）的大小，用 sizeof() 可以知道字节数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">666</span>;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">sizeof</span>(<span class="type">int</span>)&lt;&lt;endl&lt;&lt;<span class="built_in">sizeof</span>(a)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处输出为4，即4字节，每字节8位，一共32位，2^32为其大小</p>
<p>范围要看有无符号</p>
<p>##拓展：自定义类的大小</p>
<h1 id="→和-的分别"><a href="#→和-的分别" class="headerlink" title="→和.的分别"></a>→和.的分别</h1><p>这个一般在使用  结构体struct  或是  类class  的对象成员  可以见到</p>
<p>成员  包括成员函数（指针）和变量成员</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">str</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;Struct,*PStruct;</span><br><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> <span class="title class_">cla</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="number">2</span>; &#125;</span><br><span class="line">&#125;Class,*PClass;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Struct s1;</span><br><span class="line">	PStruct s2=&amp;s1;</span><br><span class="line">	cout &lt;&lt; s1.a &lt;&lt; endl </span><br><span class="line">		&lt;&lt; s2-&gt;b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	Class c1;</span><br><span class="line">	PClass c2 = &amp;c1;</span><br><span class="line">	cout &lt;&lt; c1.a &lt;&lt; endl</span><br><span class="line">		&lt;&lt; c2-&gt;a &lt;&lt; endl;</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c2-&gt;<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##拓展：在 类class 中一般少用这些，数据都是protected的，需要函数接口</p>
<h1 id="this用法"><a href="#this用法" class="headerlink" title="this用法"></a>this用法</h1><p>this是一个待决名，cpp 里 this用来充当  当前空间所属的类的某个特定  对象开始处的指针</p>
<p>与 std:: 类似</p>
<p>大多在  类class  中出现 解决重名问题 </p>
<p>注意：this不能用于静态函数中</p>
<p>静态内存中不属于单个对象</p>
<p>静态类不属于单个对象</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> <span class="title class_">example</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a1</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a2</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">change_a3</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">		example::a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; a&lt;&lt;endl; &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">example&amp; <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*void change_b(int temp) &#123;</span></span><br><span class="line"><span class="comment">		this-&gt;b = temp;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	<span class="comment">/*static example&amp; copy1() &#123;</span></span><br><span class="line"><span class="comment">		return *this;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> b;</span><br><span class="line">&#125;Class,*PClass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Class c1;</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a1</span>(<span class="number">1</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a2</span>(<span class="number">2</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line">	c1.<span class="built_in">change_a3</span>(<span class="number">3</span>);</span><br><span class="line">	c1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">	Class c2 = c1.<span class="built_in">copy</span>();</span><br><span class="line">	c2.<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>返回函数指针，定义和返回值函数指针在一起<br>表达式的组成部分：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="keyword">mutable</span> <span class="keyword">noexcept</span>-&gt;<span class="type">int</span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"><span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br></pre></td></tr></table></figure>

<p>返回函数指针<br>mutable 指可修改捕获对象   noexcept 指无异常   -&gt;int 指返回类型  （c++20均可省略）</p>
<p>[]中写捕获方式，函数使用外部变量的方式<br>[&#x3D;]值的方式 [&amp;]引用的方式 [this]this的方式，类中 []不捕获 [&#x3D;,&amp;x]x引用其他值捕获</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">int</span>(*pMax)(<span class="type">int</span>, <span class="type">int</span>) = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="comment">//完整版lambad表达式</span></span><br><span class="line">	pMax = [](<span class="type">int</span> a, <span class="type">int</span> b)<span class="keyword">mutable</span> <span class="keyword">noexcept</span>-&gt;<span class="type">int</span> &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	<span class="comment">//省略</span></span><br><span class="line">	<span class="keyword">auto</span> pp = [](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;;</span><br><span class="line">	<span class="comment">//使用</span></span><br><span class="line">	<span class="built_in">pMax</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">pp</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//一步到位,对于短暂性实现函数</span></span><br><span class="line">	[](<span class="type">int</span> a, <span class="type">int</span> b) &#123;<span class="keyword">return</span> a &gt; b ? a : b; &#125;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//捕获</span></span><br><span class="line">	<span class="type">int</span> data = <span class="number">101010</span>;</span><br><span class="line">	<span class="keyword">auto</span> pFunc = [=] &#123; cout &lt;&lt; data &lt;&lt; endl; &#125;;</span><br><span class="line">	<span class="comment">//无参括号可以省略</span></span><br><span class="line">	<span class="comment">//值捕获不能修改,引用捕获可以修改</span></span><br><span class="line">	<span class="built_in">pFunc</span>();</span><br><span class="line">	<span class="comment">//捕获只在[=]前捕获一次，后面修改不再捕获</span></span><br><span class="line">	data = <span class="number">8080</span>;</span><br><span class="line">	<span class="built_in">pFunc</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##拓展lambda其他参数</p>
<p>​        constexpr指定函数调用运算符为constexpr函数（c++11的新关键字，大部分场景可以和const混用）</p>
<p>​        constrval指定函数调用运算符为立即函数</p>
<p>##拓展：对于一步到位的用法，在比较准则等处常使用</p>
<h1 id="如何传instance到函数中"><a href="#如何传instance到函数中" class="headerlink" title="如何传instance到函数中"></a>如何传instance到函数中</h1><p>形参，实参</p>
<p>##拓展：折叠参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//  ...折叠参数  可变参函数模板</span></span><br><span class="line"><span class="comment">//  ...Args是一个参数包  定义方法  Args  ...变量名字</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty,<span class="keyword">class</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(_Ty data, Args ...args)</span> </span>&#123;<span class="comment">//&#123;1,&quot;string&quot;,1&#125;</span></span><br><span class="line">	cout &lt;&lt; data &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;<span class="comment">//&#123;1&#125;</span></span><br><span class="line">	<span class="built_in">print</span>(args...);<span class="comment">//&#123;&quot;string&quot;,1&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(_Ty data)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; data &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">print</span>(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="number">1.1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="头文件编写"><a href="#头文件编写" class="headerlink" title="头文件编写"></a>头文件编写</h1><p>.h的编写</p>
<p>在头文件中一般命名类和方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma once//防止头文件重复</span><br></pre></td></tr></table></figure>

<p>##拓展：拿项目举例</p>
<h1 id="makefile的编写"><a href="#makefile的编写" class="headerlink" title="makefile的编写"></a>makefile的编写</h1><p>make是linux下的一个管理文件依赖关系的工具</p>
<p>在项目中常见 make makefile Makefile</p>
<p>makefile优先级高于Makefile</p>
<p>在makefile中语法为</p>
<p>target:prerequisites</p>
<p>​    commad</p>
<p>第一条语句是终极目标</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objs=begin.o body.o end.o</span><br><span class="line">CC=gcc</span><br><span class="line"><span class="section">final:<span class="variable">$(objs)</span></span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(objs)</span> -o final</span><br><span class="line"><span class="section">begin.o:begin.c</span></span><br><span class="line">	gcc begin.c -c -o begin.o</span><br><span class="line"><span class="section">body.o:body.c</span></span><br><span class="line">	gcc body.c -c -o body.o</span><br><span class="line"><span class="section">end.o:end.c</span></span><br><span class="line">	gcc end.c -c -o end.o</span><br><span class="line"><span class="section">clean: </span></span><br><span class="line">	rm -f *.o -rf</span><br></pre></td></tr></table></figure>

<p>CC默认就是gcc可以不用写</p>
<p>make即可生成文件</p>
<p>make clean即递归删除所有.o文件</p>
<p>##其余简略符号可以自行学习记忆</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/05/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>新年快乐</title>
    <url>/2022/02/05/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>#blog搭建完成(包括界面，live2d，音乐)（待完善）</p>
]]></content>
  </entry>
  <entry>
    <title>win下 hexo架构+butterfly主题+live2d看板娘 博客搭建</title>
    <url>/2022/03/09/win%E4%B8%8B-hexo%E6%9E%B6%E6%9E%84-butterfly%E4%B8%BB%E9%A2%98-live2d%E7%9C%8B%E6%9D%BF%E5%A8%98-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>需要git<br>下载nodejs lts版本 nodejs.org&#x2F;zh-cn&#x2F;<br>安装时选择固定路径，勾选自动安装相关软件<br>cmd下： (或者git下用linux指令)<br>npm install -g cnpm –registry&#x3D;<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a><br>cnpm install -g hexo-cli</p>
<h2 id="依次输入指令"><a href="#依次输入指令" class="headerlink" title="依次输入指令"></a>依次输入指令</h2><p>chdir查看当前目录<br>md blog或者mkdir E:\blog（最好不要blog，改个名字)<br>e:<br>cd e:\blog<br>进入根目录<br>hexo init<br>npm install<br>hexo s<br>hexo n “a”创建文件<br>cd source_posts<br>修改文件<br>cd..退回上一文件夹<br>hexo g本地静态保存<br>hexo s本地localhost:4000启动(在s后加  -p 改端口)</p>
<h2 id="静态网页实现"><a href="#静态网页实现" class="headerlink" title="静态网页实现"></a>静态网页实现</h2><p>在gitee(要ppage)或者github上创建公开仓库.io结尾<br>cnpm install –save hexo-deployer-git<br>编辑_config.yml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: 	</span><br><span class="line">	gitrepo: https://github.com/你的用户名.github.io.git</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>

<p>hexo d 推送博客到远端</p>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly  下载主题<br>(没pug和stylus渲染器要下载)<br>编辑_config.yml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">themes:butterfly</span><br></pre></td></tr></table></figure>

<p>hexo clean清除缓存文件和已生成公开文件<br>hexo g</p>
<h2 id="添加live2d看板娘"><a href="#添加live2d看板娘" class="headerlink" title="添加live2d看板娘"></a>添加live2d看板娘</h2><p>npm uninstall –save hexo-helper-live2d(如果下载了官方的要卸载)<br>cd进入themes&#x2F;butterfly&#x2F;source<br>git clone <a href="https://github.com/stevenjoezhang/live2d-widget.git(443%E6%8A%A5%E9%94%99%E5%B0%B1%E7%AD%89%E7%AD%89%E5%86%8D%E8%AF%95)">https://github.com/stevenjoezhang/live2d-widget.git(443报错就等等再试)</a><br>修改live2d-widget的autoload.js的live2d_path改为下方那个<br>进入butterfly下layout下includes的head.pug末尾粘贴</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script(src=&#x27;live2d-widget/autoload.js&#x27;)</span><br></pre></td></tr></table></figure>

<p>最后在根目录下的config加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">live2d:</span><br><span class="line">	enable:true</span><br></pre></td></tr></table></figure>

<p>修改ive2d-widget的参数：<br>    waifu.css修改位置<br>    waifu-tips.js修改文本</p>
<h2 id="增加搜索"><a href="#增加搜索" class="headerlink" title="增加搜索"></a>增加搜索</h2><p>npm install hexo-generator-searchdb –save<br>vim source&#x2F;_data&#x2F;butterfly.yml<br>localsearch改true</p>
<h2 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h2><p>hexo手册<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>butterfly文档<a href="https://butterfly.js.org/posts/21cfbf15/">https://butterfly.js.org/posts/21cfbf15/</a><br>改网站搜索免费社交图标<a href="https://fontawesome.com/v5.15/icons?d=gallery&amp;p=1&amp;m=free">https://fontawesome.com/v5.15/icons?d=gallery&amp;p=1&amp;m=free</a><br>改网站顶置图片<a href="https://pic.netbian.com/4kdongman/">https://pic.netbian.com/4kdongman/</a><br>live2d内容网站：<br>api:github.com&#x2F;fghrsh&#x2F;live2d_api<br>模型:github.com&#x2F;summerscar&#x2F;live2dDemo<br>参考:<a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a><br> waifu-tips.js 的详细设置说明，和 waifu-tips.json 节点说明，见<a href="https://github.com/fghrsh/live2d_demo">https://github.com/fghrsh/live2d_demo</a></p>
]]></content>
      <tags>
        <tag>hexo butterfly live2d</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言01</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8001/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言-01"><a href="#c语言-01" class="headerlink" title="c语言 01"></a>c语言 01</h1><h2 id="1-1-c语言组成"><a href="#1-1-c语言组成" class="headerlink" title="1.1 c语言组成"></a>1.1 c语言组成</h2><h3 id="关键字-32个"><a href="#关键字-32个" class="headerlink" title="关键字(32个)"></a>关键字(32个)</h3><p>auto signed unsigned int float double char long short<br>if else switch case default for do while continue break return goto<br>tyedef const static extern<br>struct union enum register<br>volatile sizeof</p>
<h3 id="运算符特殊功能符号"><a href="#运算符特殊功能符号" class="headerlink" title="运算符特殊功能符号"></a>运算符特殊功能符号</h3><p>￥ $ &amp; ^ * ()</p>
<h3 id="值-计算机直接识别直接存储"><a href="#值-计算机直接识别直接存储" class="headerlink" title="值(计算机直接识别直接存储)"></a>值(计算机直接识别直接存储)</h3><p>整型:十进制;八进制0为前置;十六进制0x前缀;无符号u后缀<br>浮点:lf后缀为double，f为float（不加默认double）<br>字符:   ‘   ’   括起来一个字符   \加东西也是一个字符<br>字符串字面量:   “   ”   括起来的</p>
<h3 id="标识符-程序员定义"><a href="#标识符-程序员定义" class="headerlink" title="标识符(程序员定义)"></a>标识符(程序员定义)</h3><p>如include，库，函数，变量，宏，结构，联合体名等等<br>命名规则：<br>1、只有数字，字母，下划线组成<br>2、不可以数字开头<br>3、不可以和关键字冲突<br>4、大小写敏感<br>最好顾名思义且好看<br>i,j,k循环变量<br>r,ret函数返回值<br>CreatWindow（windows习惯）或creat_window（linux习惯）</p>
<h4 id="vs注意事项："><a href="#vs注意事项：" class="headerlink" title="vs注意事项："></a>vs注意事项：</h4><p>#define _CRT_SECURE_NO_WARNINGS<br>&#x2F;&#x2F;vs要关安全开发周期检查，不然要加宏<br>&#x2F;&#x2F;关周期：项目，属性，c&#x2F;c++，sdl检查关掉</p>
<h2 id="1-2-c语言程序尝试"><a href="#1-2-c语言程序尝试" class="headerlink" title="1.2 c语言程序尝试"></a>1.2 c语言程序尝试</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//while (1);//停顿</span></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//停顿</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言02</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8002/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言02"><a href="#c语言02" class="headerlink" title="c语言02"></a>c语言02</h1><h2 id="2-1-常量与变量"><a href="#2-1-常量与变量" class="headerlink" title="2.1 常量与变量"></a>2.1 常量与变量</h2><p>对于计算机所有数据都是2进制<br>内存的最小管理单位byte字节，单位tb,gb,mb,kb,b；<br>内存的最小单位bit比特，晶体管，二进制位</p>
<h3 id="基本数据类型-占据内存的大小，数据的表示方式"><a href="#基本数据类型-占据内存的大小，数据的表示方式" class="headerlink" title="基本数据类型(占据内存的大小，数据的表示方式)"></a>基本数据类型(占据内存的大小，数据的表示方式)</h3><p>int（16位2字节32位4字节） char float double short long<br>char的本质是int，所有类型都要转成整数来储存<br>浮点数:正负位，11位指数，52位科学计数法<br>char是多字节字符集，wchar_t宽字节字符集、unicode字符集<br>值在常量区（只读），变量在变量区！！！</p>
<p>标识符(变量)：声明,定义,使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;<span class="comment">//声明并定义一个变量 类型为int 变量名为n，占据了一个可写的内存</span></span><br><span class="line">    n = <span class="number">10</span>;<span class="comment">//使用变量</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//返回一个常量，占据一个只读的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-有无符号"><a href="#2-2-有无符号" class="headerlink" title="2.2 有无符号"></a>2.2 有无符号</h2><p>存储模式：有无符号，不影响类型<br>所有类型默认有符号，加上unsign表示无符号<br>数的范围：无符号0 ~ 2^n-1,有符号-2^(n-1) ~ 2^(n-1)</p>
<h3 id="源码，反码，补码"><a href="#源码，反码，补码" class="headerlink" title="源码，反码，补码"></a>源码，反码，补码</h3><p>计算机内全部储存都是补码，补码&#x3D;反码+1,反码&#x3D;按位取反<br>补码原理：1111+0001-m即回绕<br>反码原理：1111-m</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> c = <span class="number">456</span>;</span><br><span class="line">	<span class="type">int</span> n = c;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n);<span class="comment">//-56</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-类型转换和溢出"><a href="#2-3-类型转换和溢出" class="headerlink" title="2.3 类型转换和溢出"></a>2.3 类型转换和溢出</h2><p>c语言是弱类型语言，类型检查不严格</p>
<p>标准io：在stdio.h库中，有printf和scanf<br>printf()可变长参数列表用 , 隔开参数<br>第一个参数是字符串（字符指针，字符数组，字符串字面量）<br>转义字符：%占位符（d十进制int有符号u十进制int无符号x十六进制f6位lf6位c字符型g省小数无用0p地址s字符串，\功能符（ascii码）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n=<span class="number">55</span>;</span><br><span class="line">	<span class="type">double</span> d = <span class="number">66.66</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);</span><br><span class="line">    <span class="comment">//隐式转换，对于int a = b+c(b,c是double)这里是数据丢失</span></span><br><span class="line">	<span class="comment">//危险情况：输出时溢出被截断,截断高位。注意：如果多个%d就再读4字节而不是读下一个参数，因为这是压栈式（数据从右往左，高字节压倒低字节）</span></span><br><span class="line">	<span class="comment">//运算溢出几乎都会回绕(会扩大内存进位1仍存在)，赋值几乎都是截断</span></span><br><span class="line">	<span class="comment">//(int)d;//强制类型转换，小数转整形直接丢弃小数(丢失数据不是截断)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-大小端系统"><a href="#2-4-大小端系统" class="headerlink" title="2.4 大小端系统"></a>2.4 大小端系统</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//高低端字节序通过指针可以看出</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0x11223344</span>;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	c = n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言03</title>
    <url>/2022/03/11/c%E8%AF%AD%E8%A8%8003/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="c语言03"><a href="#c语言03" class="headerlink" title="c语言03"></a>c语言03</h1><h2 id="3-1-表达式"><a href="#3-1-表达式" class="headerlink" title="3.1 表达式"></a>3.1 表达式</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//表达式具备唯一返回值</span></span><br><span class="line">	<span class="comment">//,连接多个语句     =赋值    ;结束语句   ()提升优先级</span></span><br><span class="line">	<span class="comment">//赋值顺序右往左</span></span><br><span class="line">	<span class="comment">//目数（操作数个数）：单双三    如  ，双目    ；单目    ？：三目</span></span><br><span class="line">	<span class="comment">//a?b:c;即a真假，真则b假则c（非0真，0假）</span></span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">1</span>,<span class="number">2</span>;<span class="comment">//n=1</span></span><br><span class="line">	n = (<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//n=2</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-输出详解"><a href="#3-2-输出详解" class="headerlink" title="3.2 输出详解"></a>3.2 输出详解</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//只用于输出字符   </span></span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;hahaha&quot;</span>);<span class="comment">//只用于输出字符串 ，并自动回车  </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,(<span class="type">int</span>) <span class="string">&quot;1&quot;</span>); </span><br><span class="line">    <span class="comment">//字符串总以\0结尾(可省略),返回的是地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hahahaha%d\n&quot;</span>, <span class="number">10</span>);<span class="comment">//无输出上限</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//char 1字节，中文 2字节 属于字符串</span></span><br><span class="line">	<span class="comment">//char中存的是ascii码   a对应97</span></span><br><span class="line">	<span class="comment">//字符集 char 1字节 wchar_t 2字节</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//小数存储 float（4字节） 1符号，8e（ieee规定存储的时候要加上一个中间值127或1023）,23科学计数  double(8字节) 1符号，11e,52科学计数（科学计数：只要一位整数且小数点前必为1所以省去，只保留的小数点后面的部分）(e绝对范围，科学计数绝对精度)</span></span><br><span class="line">	<span class="comment">//2进制科学计数法： 小数点后就是n1*1/2^1+n2*1/2^2+n3*1/2^3…… </span></span><br><span class="line">	<span class="comment">//无可避免的浮点误差0.1+0.2=0.3(存储方式问题)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
</search>
